/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { ApiConfig } from '../models';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
export class LibraryService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    areSavedAlbums(ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + `/v1/me/albums/contains`, {
            params: {
                ids: ids.join(',')
            }
        });
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    areSavedTracks(ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + `/v1/me/tracks/contains`, {
            params: {
                ids: ids.join(',')
            }
        });
    }
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    getSavedAlbums(limit = 20, offset = 0, market) {
        return this.http.get(this.config.baseUrl + `/v1/me/albums`, {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market
            }
        });
    }
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    getSavedTracks(limit = 20, offset = 0, market) {
        return this.http.get(this.config.baseUrl + `/v1/me/tracks`, {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market
            }
        });
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    saveAlbums(ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + `/v1/me/albums`, {}, {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(() => true));
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    removeAlbums(ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + `/v1/me/albums`, {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(() => true));
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    saveTracks(ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + `/v1/me/tracks`, {}, {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(() => true));
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    removeTracks(ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + `/v1/me/tracks`, {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(() => true));
    }
}
LibraryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LibraryService.ctorParameters = () => [
    { type: ApiConfig, decorators: [{ type: Optional }] },
    { type: HttpClient }
];
/** @nocollapse */ LibraryService.ngInjectableDef = i0.defineInjectable({ factory: function LibraryService_Factory() { return new LibraryService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: LibraryService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    LibraryService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    LibraryService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,