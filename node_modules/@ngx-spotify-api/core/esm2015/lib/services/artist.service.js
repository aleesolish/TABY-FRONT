/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { of } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
class ArtistListResponse {
}
if (false) {
    /** @type {?} */
    ArtistListResponse.prototype.artists;
}
class TrackListResponse {
}
if (false) {
    /** @type {?} */
    TrackListResponse.prototype.tracks;
}
export class ArtistService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getArtist(id) {
        return this.http.get(this.config.baseUrl + '/v1/artists/' + id, {
            params: {}
        });
    }
    /**
     * @param {?} id
     * @param {?=} includeGroups
     * @param {?=} market
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    getArtistsAlbums(id, includeGroups, market, limit = 20, offset = 0) {
        return this.http.get(this.config.baseUrl + '/v1/artists/' + id + '/albums', {
            params: {
                include_groups: includeGroups ? includeGroups.join(',') : null,
                market,
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    }
    /**
     * @param {?} id
     * @param {?} market
     * @return {?}
     */
    getArtistsTopTracks(id, market) {
        return this.http.get(this.config.baseUrl + '/v1/artists/' + id + '/top-tracks', {
            params: {
                market: market
            }
        }).pipe(map((res) => {
            return res.tracks;
        }));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getArtistsRelatedArtists(id) {
        return this.http.get(this.config.baseUrl + '/v1/artists/' + id + '/related-artists', {
            params: {}
        }).pipe(map((res) => {
            return res.artists;
        }));
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getArtists(ids) {
        if (ids == null || ids.length < 1) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/artists/', {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map((res) => {
            return res.artists;
        }));
    }
}
ArtistService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ArtistService.ctorParameters = () => [
    { type: ApiConfig, decorators: [{ type: Optional }] },
    { type: HttpClient }
];
/** @nocollapse */ ArtistService.ngInjectableDef = i0.defineInjectable({ factory: function ArtistService_Factory() { return new ArtistService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: ArtistService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ArtistService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    ArtistService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNwb3RpZnktYXBpL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYXJ0aXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBYSxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFcEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBSWhELE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDOzs7O0FBSXBDLE1BQU0sa0JBQWtCO0NBRXZCOzs7SUFEQyxxQ0FBa0I7O0FBR3BCLE1BQU0saUJBQWlCO0NBRXRCOzs7SUFEQyxtQ0FBZ0I7O0FBTWxCLE1BQU0sT0FBTyxhQUFhOzs7OztJQUV4QixZQUFnQyxNQUFpQixFQUM3QixJQUFnQjtRQURKLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDN0IsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7Ozs7O0lBRXpDLFNBQVMsQ0FBQyxFQUFVO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxHQUFHLEVBQUUsRUFBRTtZQUN0RSxNQUFNLEVBQUUsRUFBRTtTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7OztJQUVELGdCQUFnQixDQUFDLEVBQVUsRUFBRSxhQUE0QixFQUFFLE1BQWUsRUFBRSxRQUFnQixFQUFFLEVBQUUsU0FBaUIsQ0FBQztRQUNoSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUEwQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFjLEdBQUcsRUFBRSxHQUFHLFNBQVMsRUFBRTtZQUNuRyxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtnQkFDOUQsTUFBTTtnQkFDTixLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDdkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUU7YUFDMUI7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxFQUFVLEVBQUUsTUFBYztRQUM1QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFvQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFjLEdBQUcsRUFBRSxHQUFHLGFBQWEsRUFBRTtZQUNqRyxNQUFNLEVBQUU7Z0JBQ04sTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBc0IsRUFBVyxFQUFFO1lBQzlDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQzs7Ozs7SUFFRCx3QkFBd0IsQ0FBQyxFQUFVO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXFCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsR0FBRyxFQUFFLEdBQUcsa0JBQWtCLEVBQUU7WUFDdkcsTUFBTSxFQUFFLEVBQUU7U0FDWCxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQXVCLEVBQVksRUFBRTtZQUNoRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEdBQWE7UUFDdEIsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2Y7YUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBcUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxFQUFFO1lBQzdFLE1BQU0sRUFBRTtnQkFDTixHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7YUFDbkI7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQXVCLEVBQVksRUFBRTtZQUNoRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7OztZQXpERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFkTyxTQUFTLHVCQWlCRixRQUFRO1lBdEJmLFVBQVU7Ozs7Ozs7O0lBc0JKLCtCQUFxQzs7Ozs7SUFDckMsNkJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2Z9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge0FydGlzdH0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7UGFnaW5nfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge1RyYWNrfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge0FsYnVtfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge0FwaUNvbmZpZ30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtBbGJ1bUdyb3VwfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge0FsYnVtU2ltcGxpZmllZH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmNsYXNzIEFydGlzdExpc3RSZXNwb25zZSB7XHJcbiAgYXJ0aXN0czogQXJ0aXN0W107XHJcbn1cclxuXHJcbmNsYXNzIFRyYWNrTGlzdFJlc3BvbnNlIHtcclxuICB0cmFja3M6IFRyYWNrW107XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEFydGlzdFNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGNvbmZpZzogQXBpQ29uZmlnLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gIGdldEFydGlzdChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxBcnRpc3Q+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEFydGlzdD4odGhpcy5jb25maWcuYmFzZVVybCArICcvdjEvYXJ0aXN0cy8nICsgaWQsIHtcclxuICAgICAgcGFyYW1zOiB7fVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRBcnRpc3RzQWxidW1zKGlkOiBzdHJpbmcsIGluY2x1ZGVHcm91cHM/OiBBbGJ1bUdyb3VwW10sIG1hcmtldD86IHN0cmluZywgbGltaXQ6IG51bWJlciA9IDIwLCBvZmZzZXQ6IG51bWJlciA9IDApOiBPYnNlcnZhYmxlPFBhZ2luZzxBbGJ1bVNpbXBsaWZpZWQ+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQYWdpbmc8QWxidW1TaW1wbGlmaWVkPj4odGhpcy5jb25maWcuYmFzZVVybCArICcvdjEvYXJ0aXN0cy8nICsgaWQgKyAnL2FsYnVtcycsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgaW5jbHVkZV9ncm91cHM6IGluY2x1ZGVHcm91cHMgPyBpbmNsdWRlR3JvdXBzLmpvaW4oJywnKSA6IG51bGwsXHJcbiAgICAgICAgbWFya2V0LFxyXG4gICAgICAgIGxpbWl0OiBsaW1pdC50b1N0cmluZygpLFxyXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LnRvU3RyaW5nKClcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRBcnRpc3RzVG9wVHJhY2tzKGlkOiBzdHJpbmcsIG1hcmtldDogc3RyaW5nKTogT2JzZXJ2YWJsZTxUcmFja1tdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxUcmFja0xpc3RSZXNwb25zZT4odGhpcy5jb25maWcuYmFzZVVybCArICcvdjEvYXJ0aXN0cy8nICsgaWQgKyAnL3RvcC10cmFja3MnLCB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIG1hcmtldDogbWFya2V0XHJcbiAgICAgIH1cclxuICAgIH0pLnBpcGUobWFwKChyZXM6IFRyYWNrTGlzdFJlc3BvbnNlKTogVHJhY2tbXSA9PiB7XHJcbiAgICAgIHJldHVybiByZXMudHJhY2tzO1xyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0QXJ0aXN0c1JlbGF0ZWRBcnRpc3RzKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEFydGlzdFtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxBcnRpc3RMaXN0UmVzcG9uc2U+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyAnL3YxL2FydGlzdHMvJyArIGlkICsgJy9yZWxhdGVkLWFydGlzdHMnLCB7XHJcbiAgICAgIHBhcmFtczoge31cclxuICAgIH0pLnBpcGUobWFwKChyZXM6IEFydGlzdExpc3RSZXNwb25zZSk6IEFydGlzdFtdID0+IHtcclxuICAgICAgcmV0dXJuIHJlcy5hcnRpc3RzO1xyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0QXJ0aXN0cyhpZHM6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxBcnRpc3RbXT4ge1xyXG4gICAgaWYgKGlkcyA9PSBudWxsIHx8IGlkcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHJldHVybiBvZihbXSk7XHJcbiAgICB9IGVsc2UgaWYgKGlkcy5sZW5ndGggPiA1MCkge1xyXG4gICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8QXJ0aXN0TGlzdFJlc3BvbnNlPih0aGlzLmNvbmZpZy5iYXNlVXJsICsgJy92MS9hcnRpc3RzLycsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgaWRzOiBpZHMuam9pbignLCcpXHJcbiAgICAgIH1cclxuICAgIH0pLnBpcGUobWFwKChyZXM6IEFydGlzdExpc3RSZXNwb25zZSk6IEFydGlzdFtdID0+IHtcclxuICAgICAgcmV0dXJuIHJlcy5hcnRpc3RzO1xyXG4gICAgfSkpO1xyXG4gIH1cclxufVxyXG4iXX0=