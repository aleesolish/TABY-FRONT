/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
class Snapshot {
}
if (false) {
    /** @type {?} */
    Snapshot.prototype.snapshotId;
}
export class PlaylistService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?} uris
     * @param {?} position
     * @return {?}
     */
    addTracksToPlaylist(id, uris, position) {
        if (typeof uris !== typeof [] || uris.length < 1 || uris.length > 100) {
            return of(null);
        }
        return this.http.post(this.config.baseUrl + `/v1/playlists/${id}/tracks`, {
            uris: uris,
            position: position
        }).pipe(map(({ snapshotId }) => {
            return snapshotId;
        }));
    }
    /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    removeTracksFromPlaylist(id, uris) {
        if (typeof uris !== typeof [] || uris.length < 1 || uris.length > 100) {
            return of(null);
        }
        return this.http.request('DELETE', this.config.baseUrl + `/v1/playlists/${id}/tracks`, {
            body: {
                tracks: uris.map((uri) => {
                    return { uri: uri };
                })
            }
        }).pipe(map(({ snapshotId }) => {
            return snapshotId;
        }));
    }
    /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    getPlaylist(id, market) {
        return this.http.get(this.config.baseUrl + `/v1/playlists/${id}`, {
            params: {
                market: market || ''
            }
        });
    }
    /**
     * @param {?} id
     * @param {?} market
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    getPlaylistTracks(id, market, limit = 100, offset = 0) {
        return this.http.get(this.config.baseUrl + `/v1/playlists/${id}/tracks`, {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getPlaylistCover(id) {
        return this.http.get(this.config.baseUrl + `/v1/playlists/${id}/images`);
    }
    /**
     *
     * @param {?} id id of playlist
     * @param {?} image base64 encoded jpeg (max. 256KB)
     * @return {?}
     */
    uploadPlaylistCover(id, image) {
        return this.http.put(this.config.baseUrl + `/v1/playlists/${id}/images`, image, {
            headers: {
                'Content-Type': 'image/jpeg'
            }
        }).pipe(map((res) => {
            return true;
        }));
    }
    /**
     *
     * @param {?=} limit min=1, default=20, max=50
     * @param {?=} offset min=0, default=0, max=100000
     * @return {?}
     */
    getOwnPlaylists(limit = 20, offset = 0) {
        return this.http.get(this.config.baseUrl + `/v1/me/playlists`, {
            params: {
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    }
    /**
     * @param {?} id
     * @param {?=} name
     * @param {?=} isPublic
     * @param {?=} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    updateDetails(id, name, isPublic, isCollaborative, description) {
        return this.http.put(this.config.baseUrl + `/v1/playlists/${id}`, {
            name,
            public: isPublic,
            collaborative: isCollaborative,
            description: description
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        }).pipe(map((res) => {
            return true;
        }));
    }
    /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    getUsersPlaylists(id, limit = 20, offset = 0) {
        return this.http.get(this.config.baseUrl + `/v1/users/${id}/playlists`, {
            params: {
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    }
    /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    replacePlaylistTracks(id, uris) {
        return this.http.put(this.config.baseUrl + `/v1/playlists/${id}/tracks`, {
            uris: uris
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        }).pipe(map((res) => {
            return true;
        }));
    }
    /**
     * @param {?} userid
     * @param {?} name
     * @param {?} isPublic
     * @param {?} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    createPlaylists(userid, name, isPublic, isCollaborative, description = '') {
        return this.http.post(this.config.baseUrl + `/v1/users/${userid}/playlists`, {
            name,
            public: isPublic,
            collaborative: isCollaborative,
            description
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
    }
    /**
     * @param {?} id
     * @param {?} rangeStart
     * @param {?} rangeLength
     * @param {?} insertBefore
     * @param {?=} snapshot
     * @return {?}
     */
    reorderPlaylistTracks(id, rangeStart, rangeLength, insertBefore, snapshot) {
        return this.http.put(this.config.baseUrl + `/v1/playlists/${id}/tracks`, {
            range_start: rangeStart,
            insert_before: insertBefore,
            range_length: rangeLength,
            snapshot_id: snapshot
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        }).pipe(map((s) => s.snapshotId));
    }
}
PlaylistService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PlaylistService.ctorParameters = () => [
    { type: ApiConfig, decorators: [{ type: Optional }] },
    { type: HttpClient }
];
/** @nocollapse */ PlaylistService.ngInjectableDef = i0.defineInjectable({ factory: function PlaylistService_Factory() { return new PlaylistService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: PlaylistService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PlaylistService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    PlaylistService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,