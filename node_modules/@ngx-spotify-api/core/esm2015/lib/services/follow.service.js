/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { ApiConfig } from '../models';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
export class FollowService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    isFollowingArtists(ids) {
        if (ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/me/following/contains', {
            params: {
                type: 'artist',
                ids: ids.join(',')
            }
        });
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    isFollowingUsers(ids) {
        if (ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/me/following/contains', {
            params: {
                type: 'user',
                ids: ids.join(',')
            }
        });
    }
    /**
     * @param {?} playlistId
     * @param {?} usersToCheck
     * @return {?}
     */
    areFollowingPlaylist(playlistId, usersToCheck) {
        if (usersToCheck === null || usersToCheck.length === 0) {
            return of([]);
        }
        else if (usersToCheck.length > 5) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + `/v1/playlists/${playlistId}/followers/contains`, {
            params: {
                ids: usersToCheck.join(',')
            }
        });
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    followArtists(ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + '/v1/me/following', {}, {
            params: {
                type: 'artist',
                ids: ids.join(',')
            }
        }).pipe(map(() => {
            return true;
        }));
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    followUsers(ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + '/v1/me/following', {}, {
            params: {
                type: 'user',
                ids: ids.join(',')
            }
        }).pipe(map(() => {
            return true;
        }));
    }
    /**
     * @param {?} id
     * @param {?=} isPublic
     * @return {?}
     */
    followPlaylist(id, isPublic = false) {
        return this.http.put(this.config.baseUrl + `/v1/playlists/${id}/followers`, {
            public: isPublic
        }).pipe(map(() => {
            return true;
        }));
    }
    /**
     * @param {?=} limit
     * @param {?=} after
     * @return {?}
     */
    getFollowedArtists(limit = 20, after) {
        return this.http.get(this.config.baseUrl + `/v1/me/following`, {
            params: {
                type: 'artist',
                limit: limit.toString(),
                after: after
            }
        });
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    unfollowArtists(ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + '/v1/me/following', {
            params: {
                type: 'artist',
                ids: ids.join(',')
            }
        }).pipe(map(() => true));
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    unfollowUsers(ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + '/v1/me/following', {
            params: {
                type: 'user',
                ids: ids.join(',')
            }
        }).pipe(map(() => true));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    unfollowPlaylist(id) {
        return this.http.delete(this.config.baseUrl + `/v1/playlists/${id}/followers`).pipe(map(() => true));
    }
}
FollowService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FollowService.ctorParameters = () => [
    { type: ApiConfig, decorators: [{ type: Optional }] },
    { type: HttpClient }
];
/** @nocollapse */ FollowService.ngInjectableDef = i0.defineInjectable({ factory: function FollowService_Factory() { return new FollowService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: FollowService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FollowService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    FollowService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,