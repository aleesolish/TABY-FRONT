/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
class AlbumsResponse {
}
if (false) {
    /** @type {?} */
    AlbumsResponse.prototype.albums;
}
export class AlbumService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    getAlbum(id, market) {
        return this.http.get(this.config.baseUrl + '/v1/albums/' + id, {
            params: {
                market: market
            }
        });
    }
    /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    getAlbumTracks(id, limit = 20, offset = 0, market) {
        return this.http.get(this.config.baseUrl + '/v1/albums/' + id + '/tracks', {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    }
    /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    getAlbums(ids, market) {
        if (ids == null || ids.length < 1) {
            return of([]);
        }
        else if (ids.length > 20) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/albums', {
            params: {
                ids: ids.join(','),
                market: market
            }
        }).pipe(map((res) => {
            return res.albums;
        }));
    }
}
AlbumService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AlbumService.ctorParameters = () => [
    { type: ApiConfig, decorators: [{ type: Optional }] },
    { type: HttpClient }
];
/** @nocollapse */ AlbumService.ngInjectableDef = i0.defineInjectable({ factory: function AlbumService_Factory() { return new AlbumService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: AlbumService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlbumService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    AlbumService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxidW0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtc3BvdGlmeS1hcGkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hbGJ1bS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFhLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUVwQyxPQUFPLEVBQUMsR0FBRyxFQUFNLE1BQU0sZ0JBQWdCLENBQUM7QUFHeEMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7OztBQUVwQyxNQUFNLGNBQWM7Q0FFbkI7OztJQURDLGdDQUFnQjs7QUFNbEIsTUFBTSxPQUFPLFlBQVk7Ozs7O0lBRXZCLFlBQWdDLE1BQWlCLEVBQzdCLElBQWdCO1FBREosV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUM3QixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQ3BDLENBQUM7Ozs7OztJQUVELFFBQVEsQ0FBQyxFQUFVLEVBQUUsTUFBZTtRQUNsQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLGFBQWEsR0FBRyxFQUFFLEVBQUU7WUFDcEUsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7OztJQUVELGNBQWMsQ0FBQyxFQUFVLEVBQUUsUUFBZ0IsRUFBRSxFQUFFLFNBQWlCLENBQUMsRUFBRSxNQUFlO1FBQ2hGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLGFBQWEsR0FBRyxFQUFFLEdBQUcsU0FBUyxFQUFFO1lBQ3hGLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDdkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Z0JBQ3pCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsR0FBYSxFQUFFLE1BQWU7UUFDdEMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2Y7YUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBaUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsWUFBWSxFQUFFO1lBQ3ZFLE1BQU0sRUFBRTtnQkFDTixHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ2xCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQW1CLEVBQVcsRUFBRTtZQUMzQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7OztZQTFDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFSTyxTQUFTLHVCQVdGLFFBQVE7WUFqQmYsVUFBVTs7Ozs7Ozs7SUFpQkosOEJBQXFDOzs7OztJQUNyQyw0QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2Z9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge0FsYnVtfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge21hcCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7UGFnaW5nfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge1RyYWNrfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge0FwaUNvbmZpZ30gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmNsYXNzIEFsYnVtc1Jlc3BvbnNlIHtcclxuICBhbGJ1bXM6IEFsYnVtW107XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEFsYnVtU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgY29uZmlnOiBBcGlDb25maWcsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7XHJcbiAgfVxyXG5cclxuICBnZXRBbGJ1bShpZDogc3RyaW5nLCBtYXJrZXQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPEFsYnVtPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxBbGJ1bT4odGhpcy5jb25maWcuYmFzZVVybCArICcvdjEvYWxidW1zLycgKyBpZCwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBtYXJrZXQ6IG1hcmtldFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldEFsYnVtVHJhY2tzKGlkOiBzdHJpbmcsIGxpbWl0OiBudW1iZXIgPSAyMCwgb2Zmc2V0OiBudW1iZXIgPSAwLCBtYXJrZXQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFBhZ2luZzxUcmFjaz4+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBhZ2luZzxUcmFjaz4+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyAnL3YxL2FsYnVtcy8nICsgaWQgKyAnL3RyYWNrcycsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgbGltaXQ6IGxpbWl0LnRvU3RyaW5nKCksXHJcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQudG9TdHJpbmcoKSxcclxuICAgICAgICBtYXJrZXQ6IG1hcmtldFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldEFsYnVtcyhpZHM6IHN0cmluZ1tdLCBtYXJrZXQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPEFsYnVtW10+IHtcclxuICAgIGlmIChpZHMgPT0gbnVsbCB8fCBpZHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm4gb2YoW10pO1xyXG4gICAgfSBlbHNlIGlmIChpZHMubGVuZ3RoID4gMjApIHtcclxuICAgICAgcmV0dXJuIG9mKG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEFsYnVtc1Jlc3BvbnNlPih0aGlzLmNvbmZpZy5iYXNlVXJsICsgJy92MS9hbGJ1bXMnLCB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGlkczogaWRzLmpvaW4oJywnKSxcclxuICAgICAgICBtYXJrZXQ6IG1hcmtldFxyXG4gICAgICB9XHJcbiAgICB9KS5waXBlKG1hcCgocmVzOiBBbGJ1bXNSZXNwb25zZSk6IEFsYnVtW10gPT4ge1xyXG4gICAgICByZXR1cm4gcmVzLmFsYnVtcztcclxuICAgIH0pKTtcclxuICB9XHJcbn1cclxuIl19