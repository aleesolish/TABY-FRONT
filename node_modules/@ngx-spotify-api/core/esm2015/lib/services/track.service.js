/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
export class TrackService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    getTrack(id, market) {
        return this.http.get(this.config.baseUrl + `/v1/tracks/${id}`, {
            params: {
                market
            }
        });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getAudioFeatures(id) {
        return this.http.get(this.config.baseUrl + `/v1/audio-features/${id}`);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getAudioAnalysis(id) {
        return this.http.get(this.config.baseUrl + `/v1/audio-analysis/${id}`);
    }
    /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    getTracks(ids, market) {
        if (ids === undefined || ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + `/v1/tracks`, {
            params: {
                ids: ids.join(','),
                market: market || ''
            }
        }).pipe(map(({ tracks }) => tracks));
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getSeveralAudioFeatures(ids) {
        if (ids === undefined || ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + `/v1/audio-features`, {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(({ audioFeatures }) => audioFeatures));
    }
}
TrackService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TrackService.ctorParameters = () => [
    { type: ApiConfig, decorators: [{ type: Optional }] },
    { type: HttpClient }
];
/** @nocollapse */ TrackService.ngInjectableDef = i0.defineInjectable({ factory: function TrackService_Factory() { return new TrackService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: TrackService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TrackService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    TrackService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtc3BvdGlmeS1hcGkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90cmFjay5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFhLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUlwQyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7OztBQUtwQyxNQUFNLE9BQU8sWUFBWTs7Ozs7SUFFdkIsWUFBZ0MsTUFBaUIsRUFDN0IsSUFBZ0I7UUFESixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQzdCLFNBQUksR0FBSixJQUFJLENBQVk7SUFBSSxDQUFDOzs7Ozs7SUFFbEMsUUFBUSxDQUFDLEVBQVUsRUFBRSxNQUFlO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxFQUFFLEVBQUUsRUFBRTtZQUNwRSxNQUFNLEVBQUU7Z0JBQ04sTUFBTTthQUNQO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTSxnQkFBZ0IsQ0FBQyxFQUFVO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7Ozs7O0lBRU0sZ0JBQWdCLENBQUMsRUFBVTtRQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxzQkFBc0IsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RixDQUFDOzs7Ozs7SUFFTSxTQUFTLENBQUMsR0FBYSxFQUFFLE1BQWU7UUFDN0MsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDekQsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDZjthQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUU7WUFDMUIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFvQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxZQUFZLEVBQUU7WUFDMUUsTUFBTSxFQUFFO2dCQUNOLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDbEIsTUFBTSxFQUFFLE1BQU0sSUFBSSxFQUFFO2FBQ3JCO1NBQ0YsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7O0lBRU0sdUJBQXVCLENBQUMsR0FBYTtRQUMxQyxJQUFJLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6RCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNmO2FBQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRTtZQUMxQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQjtRQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQW1DLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLG9CQUFvQixFQUFFO1lBQ2pHLE1BQU0sRUFBRTtnQkFDTixHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7YUFDbkI7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsYUFBYSxFQUFFLEVBQW1CLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7OztZQW5ERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFKTyxTQUFTLHVCQU9GLFFBQVE7WUFiZixVQUFVOzs7Ozs7OztJQWFKLDhCQUFxQzs7Ozs7SUFDckMsNEJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQge09ic2VydmFibGUsIG9mfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtUcmFja30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtBdWRpb0ZlYXR1cmVzfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge0F1ZGlvQW5hbHlzaXN9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7QXBpQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVHJhY2tTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb25maWc6IEFwaUNvbmZpZyxcclxuICAgICAgICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0VHJhY2soaWQ6IHN0cmluZywgbWFya2V0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxUcmFjaz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8VHJhY2s+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL3RyYWNrcy8ke2lkfWAsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgbWFya2V0XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEF1ZGlvRmVhdHVyZXMoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8QXVkaW9GZWF0dXJlcz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8QXVkaW9GZWF0dXJlcz4odGhpcy5jb25maWcuYmFzZVVybCArIGAvdjEvYXVkaW8tZmVhdHVyZXMvJHtpZH1gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRBdWRpb0FuYWx5c2lzKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEF1ZGlvQW5hbHlzaXM+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEF1ZGlvQW5hbHlzaXM+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL2F1ZGlvLWFuYWx5c2lzLyR7aWR9YCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VHJhY2tzKGlkczogc3RyaW5nW10sIG1hcmtldD86IHN0cmluZyk6IE9ic2VydmFibGU8VHJhY2tbXT4ge1xyXG4gICAgaWYgKGlkcyA9PT0gdW5kZWZpbmVkIHx8IGlkcyA9PT0gbnVsbCB8fCBpZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBvZihbXSk7XHJcbiAgICB9IGVsc2UgaWYgKGlkcy5sZW5ndGggPiA1MCkge1xyXG4gICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8e3RyYWNrczogVHJhY2tbXX0+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL3RyYWNrc2AsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgaWRzOiBpZHMuam9pbignLCcpLFxyXG4gICAgICAgIG1hcmtldDogbWFya2V0IHx8ICcnXHJcbiAgICAgIH1cclxuICAgIH0pLnBpcGUobWFwKCh7IHRyYWNrcyB9KTogVHJhY2tbXSA9PiB0cmFja3MpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRTZXZlcmFsQXVkaW9GZWF0dXJlcyhpZHM6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxBdWRpb0ZlYXR1cmVzW10+IHtcclxuICAgIGlmIChpZHMgPT09IHVuZGVmaW5lZCB8fCBpZHMgPT09IG51bGwgfHwgaWRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gb2YoW10pO1xyXG4gICAgfSBlbHNlIGlmIChpZHMubGVuZ3RoID4gNTApIHtcclxuICAgICAgcmV0dXJuIG9mKG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PHthdWRpb0ZlYXR1cmVzOiBBdWRpb0ZlYXR1cmVzW119Pih0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9hdWRpby1mZWF0dXJlc2AsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgaWRzOiBpZHMuam9pbignLCcpXHJcbiAgICAgIH1cclxuICAgIH0pLnBpcGUobWFwKCh7IGF1ZGlvRmVhdHVyZXMgfSk6IEF1ZGlvRmVhdHVyZXNbXSA9PiBhdWRpb0ZlYXR1cmVzKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==