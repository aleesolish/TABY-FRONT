/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
class PlaylistList {
}
if (false) {
    /** @type {?} */
    PlaylistList.prototype.playlists;
}
class CategoryList {
}
if (false) {
    /** @type {?} */
    CategoryList.prototype.categories;
}
export class BrowseService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} locale
     * @return {?}
     */
    getCategory(id, country, locale) {
        return this.http.get(this.config.baseUrl + '/v1/browse/categories/' + id, {
            params: {
                country: country,
                locale: locale
            }
        });
    }
    /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    getCategoryPlaylists(id, country, limit = 20, offset = 0) {
        return this.http.get(this.config.baseUrl + '/v1/browse/categories/' + id + '/playlists', {
            params: {
                country: country,
                limit: limit.toString(),
                offset: offset.toString()
            }
        }).pipe(map((res) => {
            return res.playlists;
        }));
    }
    /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    getCategories(country, locale, limit = 20, offset = 0) {
        return this.http.get(this.config.baseUrl + '/v1/browse/categories', {
            params: {
                country: country,
                locale: locale,
                limit: limit.toString(),
                offset: offset.toString()
            }
        }).pipe(map((list) => {
            return list.categories;
        }));
    }
    /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} timestamp
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    getFeaturedPlaylists(country, locale, timestamp = new Date(), limit = 20, offset = 0) {
        return this.http.get(this.config.baseUrl + '/v1/browse/featured-playlists', {
            params: {
                country,
                locale,
                timestamp: timestamp.toISOString(),
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    }
    /**
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    getNewReleases(country, limit = 20, offset = 0) {
        return this.http.get(this.config.baseUrl + '/v1/browse/new-releases', {
            params: {
                country,
                limit: limit.toString(),
                offset: offset.toString()
            }
        }).pipe(map(({ albums }) => {
            return albums;
        }));
    }
}
BrowseService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
BrowseService.ctorParameters = () => [
    { type: ApiConfig, decorators: [{ type: Optional }] },
    { type: HttpClient }
];
/** @nocollapse */ BrowseService.ngInjectableDef = i0.defineInjectable({ factory: function BrowseService_Factory() { return new BrowseService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: BrowseService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    BrowseService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    BrowseService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3NlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNwb3RpZnktYXBpL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYnJvd3NlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUloRCxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFLbkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7OztBQUdwQyxNQUFNLFlBQVk7Q0FFakI7OztJQURDLGlDQUFzQzs7QUFHeEMsTUFBTSxZQUFZO0NBRWpCOzs7SUFEQyxrQ0FBNkI7O0FBTS9CLE1BQU0sT0FBTyxhQUFhOzs7OztJQUV4QixZQUFnQyxNQUFpQixFQUM3QixJQUFnQjtRQURKLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDN0IsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7Ozs7Ozs7SUFFbEMsV0FBVyxDQUFDLEVBQVUsRUFBRSxPQUFnQixFQUFFLE1BQWU7UUFDOUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyx3QkFBd0IsR0FBRyxFQUFFLEVBQUU7WUFDbEYsTUFBTSxFQUFFO2dCQUNOLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixNQUFNLEVBQUUsTUFBTTthQUNmO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7Ozs7SUFFTSxvQkFBb0IsQ0FBQyxFQUFVLEVBQUUsT0FBZ0IsRUFBRSxRQUFnQixFQUFFLEVBQUUsU0FBaUIsQ0FBQztRQUM5RixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLHdCQUF3QixHQUFHLEVBQUUsR0FBRyxZQUFZLEVBQUU7WUFDckcsTUFBTSxFQUFFO2dCQUNOLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDdkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUU7YUFDMUI7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQWlCLEVBQUUsRUFBRTtZQUM5QixPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Ozs7Ozs7O0lBRU0sYUFBYSxDQUFDLE9BQWdCLEVBQUUsTUFBZSxFQUFFLFFBQWdCLEVBQUUsRUFBRSxTQUFpQixDQUFDO1FBQzVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsdUJBQXVCLEVBQUU7WUFDaEYsTUFBTSxFQUFFO2dCQUNOLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixNQUFNLEVBQUUsTUFBTTtnQkFDZCxLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDdkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUU7YUFDMUI7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQWtCLEVBQUUsRUFBRTtZQUNqQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7Ozs7Ozs7OztJQUVNLG9CQUFvQixDQUN6QixPQUFnQixFQUNoQixNQUFlLEVBQ2YsWUFBa0IsSUFBSSxJQUFJLEVBQUUsRUFDNUIsUUFBZ0IsRUFBRSxFQUFFLFNBQWlCLENBQUM7UUFFcEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBb0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsK0JBQStCLEVBQUU7WUFDN0YsTUFBTSxFQUFFO2dCQUNOLE9BQU87Z0JBQ1AsTUFBTTtnQkFDTixTQUFTLEVBQUUsU0FBUyxDQUFDLFdBQVcsRUFBRTtnQkFDbEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ3ZCLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFO2FBQzFCO1NBQ0YsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7OztJQUVNLGNBQWMsQ0FBQyxPQUFnQixFQUFFLFFBQWdCLEVBQUUsRUFBRSxTQUFpQixDQUFDO1FBQzVFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXNDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLHlCQUF5QixFQUFFO1lBQ3pHLE1BQU0sRUFBRTtnQkFDTixPQUFPO2dCQUNQLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFO2dCQUN2QixNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRTthQUMxQjtTQUNGLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDOzs7WUFyRUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBYk8sU0FBUyx1QkFnQkYsUUFBUTtZQXpCZixVQUFVOzs7Ozs7OztJQXlCSiwrQkFBcUM7Ozs7O0lBQ3JDLDZCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtDYXRlZ29yeX0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtQbGF5bGlzdH0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHtQYWdpbmd9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7RmVhdHVyZWRQbGF5bGlzdHN9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7QWxidW19IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7QWxidW1TaW1wbGlmaWVkfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge0FwaUNvbmZpZ30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtQbGF5bGlzdFNpbXBsaWZpZWR9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jbGFzcyBQbGF5bGlzdExpc3Qge1xyXG4gIHBsYXlsaXN0czogUGFnaW5nPFBsYXlsaXN0U2ltcGxpZmllZD47XHJcbn1cclxuXHJcbmNsYXNzIENhdGVnb3J5TGlzdCB7XHJcbiAgY2F0ZWdvcmllczogUGFnaW5nPENhdGVnb3J5PjtcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQnJvd3NlU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgY29uZmlnOiBBcGlDb25maWcsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgcHVibGljIGdldENhdGVnb3J5KGlkOiBzdHJpbmcsIGNvdW50cnk/OiBzdHJpbmcsIGxvY2FsZT86IHN0cmluZyk6IE9ic2VydmFibGU8Q2F0ZWdvcnk+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PENhdGVnb3J5Pih0aGlzLmNvbmZpZy5iYXNlVXJsICsgJy92MS9icm93c2UvY2F0ZWdvcmllcy8nICsgaWQsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgY291bnRyeTogY291bnRyeSxcclxuICAgICAgICBsb2NhbGU6IGxvY2FsZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRDYXRlZ29yeVBsYXlsaXN0cyhpZDogc3RyaW5nLCBjb3VudHJ5Pzogc3RyaW5nLCBsaW1pdDogbnVtYmVyID0gMjAsIG9mZnNldDogbnVtYmVyID0gMCk6IE9ic2VydmFibGU8UGFnaW5nPFBsYXlsaXN0U2ltcGxpZmllZD4+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBsYXlsaXN0TGlzdD4odGhpcy5jb25maWcuYmFzZVVybCArICcvdjEvYnJvd3NlL2NhdGVnb3JpZXMvJyArIGlkICsgJy9wbGF5bGlzdHMnLCB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGNvdW50cnk6IGNvdW50cnksXHJcbiAgICAgICAgbGltaXQ6IGxpbWl0LnRvU3RyaW5nKCksXHJcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQudG9TdHJpbmcoKVxyXG4gICAgICB9XHJcbiAgICB9KS5waXBlKG1hcCgocmVzOiBQbGF5bGlzdExpc3QpID0+IHtcclxuICAgICAgICByZXR1cm4gcmVzLnBsYXlsaXN0cztcclxuICAgICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldENhdGVnb3JpZXMoY291bnRyeT86IHN0cmluZywgbG9jYWxlPzogc3RyaW5nLCBsaW1pdDogbnVtYmVyID0gMjAsIG9mZnNldDogbnVtYmVyID0gMCk6IE9ic2VydmFibGU8UGFnaW5nPENhdGVnb3J5Pj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Q2F0ZWdvcnlMaXN0Pih0aGlzLmNvbmZpZy5iYXNlVXJsICsgJy92MS9icm93c2UvY2F0ZWdvcmllcycsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgY291bnRyeTogY291bnRyeSxcclxuICAgICAgICBsb2NhbGU6IGxvY2FsZSxcclxuICAgICAgICBsaW1pdDogbGltaXQudG9TdHJpbmcoKSxcclxuICAgICAgICBvZmZzZXQ6IG9mZnNldC50b1N0cmluZygpXHJcbiAgICAgIH1cclxuICAgIH0pLnBpcGUobWFwKChsaXN0OiBDYXRlZ29yeUxpc3QpID0+IHtcclxuICAgICAgcmV0dXJuIGxpc3QuY2F0ZWdvcmllcztcclxuICAgIH0pKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRGZWF0dXJlZFBsYXlsaXN0cyhcclxuICAgIGNvdW50cnk/OiBzdHJpbmcsXHJcbiAgICBsb2NhbGU/OiBzdHJpbmcsXHJcbiAgICB0aW1lc3RhbXA6IERhdGUgPSBuZXcgRGF0ZSgpLFxyXG4gICAgbGltaXQ6IG51bWJlciA9IDIwLCBvZmZzZXQ6IG51bWJlciA9IDApXHJcbiAgICA6IE9ic2VydmFibGU8RmVhdHVyZWRQbGF5bGlzdHM+IHtcclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8RmVhdHVyZWRQbGF5bGlzdHM+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyAnL3YxL2Jyb3dzZS9mZWF0dXJlZC1wbGF5bGlzdHMnLCB7XHJcbiAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICBjb3VudHJ5LFxyXG4gICAgICAgICAgbG9jYWxlLFxyXG4gICAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgIGxpbWl0OiBsaW1pdC50b1N0cmluZygpLFxyXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQudG9TdHJpbmcoKVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0TmV3UmVsZWFzZXMoY291bnRyeT86IHN0cmluZywgbGltaXQ6IG51bWJlciA9IDIwLCBvZmZzZXQ6IG51bWJlciA9IDApOiBPYnNlcnZhYmxlPFBhZ2luZzxBbGJ1bVNpbXBsaWZpZWQ+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDx7IGFsYnVtczogUGFnaW5nPEFsYnVtU2ltcGxpZmllZD4gfT4odGhpcy5jb25maWcuYmFzZVVybCArICcvdjEvYnJvd3NlL25ldy1yZWxlYXNlcycsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgY291bnRyeSxcclxuICAgICAgICBsaW1pdDogbGltaXQudG9TdHJpbmcoKSxcclxuICAgICAgICBvZmZzZXQ6IG9mZnNldC50b1N0cmluZygpXHJcbiAgICAgIH1cclxuICAgIH0pLnBpcGUobWFwKCh7YWxidW1zfSkgPT4ge1xyXG4gICAgICByZXR1cm4gYWxidW1zO1xyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgLy8gUmVjb21tZW5kYXRpb25zIHdpbGwgZm9sbG93IGluIGEgZnV0dXJlIHJlbGVhc2VcclxufVxyXG4iXX0=