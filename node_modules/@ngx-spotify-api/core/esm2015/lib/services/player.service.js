/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map, take } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
class DeviceList {
}
if (false) {
    /** @type {?} */
    DeviceList.prototype.devices;
}
export class PlayerService {
    /**
     * @param {?} config
     * @param {?} http
     */
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?=} deviceId
     * @return {?}
     */
    nextTrack(deviceId) {
        return this.http.post(this.config.baseUrl + `/v1/me/player/next`, {}, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(() => {
            return true;
        }));
    }
    /**
     * @param {?=} deviceId
     * @return {?}
     */
    previousTrack(deviceId) {
        return this.http.post(this.config.baseUrl + `/v1/me/player/previous`, {}, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(() => {
            return true;
        }));
    }
    /**
     * @param {?} positionMs
     * @param {?=} deviceId
     * @return {?}
     */
    seekToPosition(positionMs, deviceId) {
        return this.http.put(this.config.baseUrl + `/v1/me/player/seek`, {}, {
            params: {
                position_ms: positionMs.toString(),
                device_id: deviceId
            }
        }).pipe(take(1), map(() => {
            return true;
        }));
    }
    /**
     * @return {?}
     */
    getAvailableDevices() {
        return this.http.get(this.config.baseUrl + `/v1/me/player/devices`).pipe(map((list) => list.devices));
    }
    /**
     * @param {?} shuffle
     * @param {?=} deviceId
     * @return {?}
     */
    toggleShuffle(shuffle, deviceId) {
        return this.http.put(this.config.baseUrl + `/v1/me/player/shuffle`, {}, {
            params: {
                state: shuffle.toString(),
                device_id: deviceId
            }
        }).pipe(take(1), map(() => {
            return true;
        }));
    }
    /**
     *
     * @param {?} deviceIds Although an array is accepted, only a single deviceId is currently supported
     * @param {?=} forcePlay
     * @return {?}
     */
    transferPlayback(deviceIds, forcePlay = false) {
        return this.http.put(this.config.baseUrl + `/v1/me/player`, {
            device_ids: deviceIds.join(','),
            play: forcePlay
        }).pipe(take(1), map(() => {
            return true;
        }));
    }
    /**
     * @param {?=} limit
     * @param {?=} before
     * @param {?=} after
     * @return {?}
     */
    getRecentlyPlayedTracks(limit = 20, before, after = 0) {
        return this.http.get(this.config.baseUrl + `/v1/me/player/recently-played`, {
            params: {
                limit: limit.toString(),
                before: (before ? before.toString() : undefined),
                after: after.toString(),
            }
        });
    }
    /**
     * @param {?=} deviceId
     * @param {?=} context
     * @param {?=} uris
     * @param {?=} offset
     * @param {?=} positionMs
     * @return {?}
     */
    startPlayback(deviceId, context, uris, offset, positionMs) {
        return this.http.put(this.config.baseUrl + `/v1/me/player/play`, {
            context_uri: context,
            uris: uris,
            offset: offset,
            position_ms: positionMs
        }, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(() => {
            return true;
        }));
    }
    /**
     * @param {?=} deviceId
     * @return {?}
     */
    pausePlayback(deviceId) {
        return this.http.put(this.config.baseUrl + `/v1/me/player/pause`, {}, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(() => {
            return true;
        }));
    }
    /**
     * @param {?} mode
     * @param {?=} deviceId
     * @return {?}
     */
    toggleRepeatMode(mode, deviceId) {
        return this.http.put(this.config.baseUrl + `/v1/me/player/repeat`, {}, {
            params: {
                state: mode,
                device_id: deviceId
            }
        }).pipe(take(1), map(() => {
            return true;
        }));
    }
    /**
     * @param {?=} market
     * @return {?}
     */
    getPlayback(market) {
        return this.http.get(this.config.baseUrl + `/v1/me/player`, {
            params: {
                market: market
            }
        });
    }
    /**
     * @param {?=} market
     * @return {?}
     */
    getCurrentlyPlayingTrack(market) {
        return this.http.get(this.config.baseUrl + `/v1/me/player/currently-playing`, {
            params: {
                market: market
            }
        });
    }
    /**
     * @param {?} volume
     * @param {?=} deviceId
     * @return {?}
     */
    setPlaybackVolume(volume, deviceId) {
        return this.http.put(this.config.baseUrl + `/v1/me/player/volume`, {}, {
            params: {
                volume_percent: volume.toString(),
                device_id: deviceId
            }
        }).pipe(take(1), map(() => {
            return true;
        }));
    }
}
PlayerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PlayerService.ctorParameters = () => [
    { type: ApiConfig, decorators: [{ type: Optional }] },
    { type: HttpClient }
];
/** @nocollapse */ PlayerService.ngInjectableDef = i0.defineInjectable({ factory: function PlayerService_Factory() { return new PlayerService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: PlayerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PlayerService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    PlayerService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNwb3RpZnktYXBpL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvcGxheWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUdoRCxPQUFPLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBS3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxXQUFXLENBQUM7Ozs7QUFFcEMsTUFBTSxVQUFVO0NBRWY7OztJQURDLDZCQUFrQjs7QUFNcEIsTUFBTSxPQUFPLGFBQWE7Ozs7O0lBRXhCLFlBQWdDLE1BQWlCLEVBQzdCLElBQWdCO1FBREosV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUM3QixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQzs7Ozs7SUFFbEMsU0FBUyxDQUFDLFFBQWlCO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsb0JBQW9CLEVBQUUsRUFBRSxFQUFFO1lBQ3BFLE1BQU0sRUFBRTtnQkFDTixTQUFTLEVBQUUsUUFBUTthQUNwQjtTQUNGLENBQUMsQ0FBQyxJQUFJLENBQ0wsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDUCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7OztJQUVNLGFBQWEsQ0FBQyxRQUFpQjtRQUNwQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLHdCQUF3QixFQUFFLEVBQUUsRUFB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LENBQ0gsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRU0sV0FBVyxDQUFDLE1BQWU7UUFDaEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxlQUFlLEVBQUU7WUFDcEUsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVNLHdCQUF3QixDQUFDLE1BQWU7UUFDN0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBZSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxpQ0FBaUMsRUFBRTtZQUMxRixNQUFNLEVBQUU7Z0JBQ04sTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQUVNLGlCQUFpQixDQUFDLE1BQWMsRUFBRSxRQUFpQjtRQUN4RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLHNCQUFzQixFQUFFLEVBQUUsRUFBRTtZQUNyRSxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pDLFNBQVMsRUFBRSxRQUFRO2FBQ3BCO1NBQ0YsQ0FBQyxDQUFDLElBQUksQ0FDTCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNQLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7OztZQXRLRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFSTyxTQUFTLHVCQVdGLFFBQVE7WUFuQmYsVUFBVTs7Ozs7Ozs7SUFtQkosK0JBQXFDOzs7OztJQUNyQyw2QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7RGV2aWNlfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge21hcCwgdGFrZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge0N1cnNvclBhZ2luZ30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtQbGF5SGlzdG9yeX0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtQbGF5YmFja30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtUcmFja0N1cnJlbnR9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7QXBpQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuY2xhc3MgRGV2aWNlTGlzdCB7XHJcbiAgZGV2aWNlczogRGV2aWNlW107XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFBsYXllclNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGNvbmZpZzogQXBpQ29uZmlnLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gIHB1YmxpYyBuZXh0VHJhY2soZGV2aWNlSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9tZS9wbGF5ZXIvbmV4dGAsIHt9LCB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGRldmljZV9pZDogZGV2aWNlSWRcclxuICAgICAgfVxyXG4gICAgfSkucGlwZShcclxuICAgICAgdGFrZSgxKSxcclxuICAgICAgbWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcHJldmlvdXNUcmFjayhkZXZpY2VJZD86IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL21lL3BsYXllci9wcmV2aW91c2AsIHt9LCB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGRldmljZV9pZDogZGV2aWNlSWRcclxuICAgICAgfVxyXG4gICAgfSkucGlwZShcclxuICAgICAgdGFrZSgxKSxcclxuICAgICAgbWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2Vla1RvUG9zaXRpb24ocG9zaXRpb25NczogbnVtYmVyLCBkZXZpY2VJZD86IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQodGhpcy5jb25maWcuYmFzZVVybCArIGAvdjEvbWUvcGxheWVyL3NlZWtgLCB7fSwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBwb3NpdGlvbl9tczogcG9zaXRpb25Ncy50b1N0cmluZygpLFxyXG4gICAgICAgIGRldmljZV9pZDogZGV2aWNlSWRcclxuICAgICAgfVxyXG4gICAgfSkucGlwZShcclxuICAgICAgdGFrZSgxKSxcclxuICAgICAgbWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0QXZhaWxhYmxlRGV2aWNlcygpOiBPYnNlcnZhYmxlPERldmljZVtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxEZXZpY2VMaXN0Pih0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9tZS9wbGF5ZXIvZGV2aWNlc2ApLnBpcGUobWFwKChsaXN0OiBEZXZpY2VMaXN0KSA9PiBsaXN0LmRldmljZXMpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB0b2dnbGVTaHVmZmxlKHNodWZmbGU6IGJvb2xlYW4sIGRldmljZUlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dCh0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9tZS9wbGF5ZXIvc2h1ZmZsZWAsIHt9LCB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIHN0YXRlOiBzaHVmZmxlLnRvU3RyaW5nKCksXHJcbiAgICAgICAgZGV2aWNlX2lkOiBkZXZpY2VJZFxyXG4gICAgICB9XHJcbiAgICB9KS5waXBlKFxyXG4gICAgICB0YWtlKDEpLFxyXG4gICAgICBtYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGRldmljZUlkcyBBbHRob3VnaCBhbiBhcnJheSBpcyBhY2NlcHRlZCwgb25seSBhIHNpbmdsZSBkZXZpY2VJZCBpcyBjdXJyZW50bHkgc3VwcG9ydGVkXHJcbiAgICogQHBhcmFtIGZvcmNlUGxheVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0cmFuc2ZlclBsYXliYWNrKGRldmljZUlkczogc3RyaW5nW10sIGZvcmNlUGxheTogYm9vbGVhbiA9IGZhbHNlKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dCh0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9tZS9wbGF5ZXJgLCB7XHJcbiAgICAgIGRldmljZV9pZHM6IGRldmljZUlkcy5qb2luKCcsJyksXHJcbiAgICAgIHBsYXk6IGZvcmNlUGxheVxyXG4gICAgfSkucGlwZShcclxuICAgICAgdGFrZSgxKSxcclxuICAgICAgbWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0UmVjZW50bHlQbGF5ZWRUcmFja3MobGltaXQ6IG51bWJlciA9IDIwLCBiZWZvcmU/OiBudW1iZXIsIGFmdGVyOiBudW1iZXIgPSAwKTogT2JzZXJ2YWJsZTxDdXJzb3JQYWdpbmc8UGxheUhpc3Rvcnk+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxDdXJzb3JQYWdpbmc8UGxheUhpc3Rvcnk+Pih0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9tZS9wbGF5ZXIvcmVjZW50bHktcGxheWVkYCwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBsaW1pdDogbGltaXQudG9TdHJpbmcoKSxcclxuICAgICAgICBiZWZvcmU6IChiZWZvcmUgPyBiZWZvcmUudG9TdHJpbmcoKSA6IHVuZGVmaW5lZCksXHJcbiAgICAgICAgYWZ0ZXI6IGFmdGVyLnRvU3RyaW5nKCksXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXJ0UGxheWJhY2soZGV2aWNlSWQ/OiBzdHJpbmcsIGNvbnRleHQ/OiBzdHJpbmcsIHVyaXM/OiBzdHJpbmdbXSwgb2Zmc2V0PzogYW55LCBwb3NpdGlvbk1zPzogbnVtYmVyKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dCh0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9tZS9wbGF5ZXIvcGxheWAsIHtcclxuICAgICAgY29udGV4dF91cmk6IGNvbnRleHQsXHJcbiAgICAgIHVyaXM6IHVyaXMsXHJcbiAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG4gICAgICBwb3NpdGlvbl9tczogcG9zaXRpb25Nc1xyXG4gICAgfSwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBkZXZpY2VfaWQ6IGRldmljZUlkXHJcbiAgICAgIH1cclxuICAgIH0pLnBpcGUoXHJcbiAgICAgIHRha2UoMSksXHJcbiAgICAgIG1hcCgoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBhdXNlUGxheWJhY2soZGV2aWNlSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAucHV0KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL21lL3BsYXllci9wYXVzZWAsIHt9LCB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGRldmljZV9pZDogZGV2aWNlSWRcclxuICAgICAgfVxyXG4gICAgfSkucGlwZShcclxuICAgICAgdGFrZSgxKSxcclxuICAgICAgbWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG9nZ2xlUmVwZWF0TW9kZShtb2RlOiAndHJhY2snIHwgJ2NvbnRleHQnIHwgJ29mZicsIGRldmljZUlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dCh0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9tZS9wbGF5ZXIvcmVwZWF0YCwge30sIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgc3RhdGU6IG1vZGUsXHJcbiAgICAgICAgZGV2aWNlX2lkOiBkZXZpY2VJZFxyXG4gICAgICB9XHJcbiAgICB9KS5waXBlKFxyXG4gICAgICB0YWtlKDEpLFxyXG4gICAgICBtYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRQbGF5YmFjayhtYXJrZXQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFBsYXliYWNrPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQbGF5YmFjaz4odGhpcy5jb25maWcuYmFzZVVybCArIGAvdjEvbWUvcGxheWVyYCwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBtYXJrZXQ6IG1hcmtldFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRDdXJyZW50bHlQbGF5aW5nVHJhY2sobWFya2V0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxUcmFja0N1cnJlbnQ+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFRyYWNrQ3VycmVudD4odGhpcy5jb25maWcuYmFzZVVybCArIGAvdjEvbWUvcGxheWVyL2N1cnJlbnRseS1wbGF5aW5nYCwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBtYXJrZXQ6IG1hcmtldFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRQbGF5YmFja1ZvbHVtZSh2b2x1bWU6IG51bWJlciwgZGV2aWNlSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAucHV0KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL21lL3BsYXllci92b2x1bWVgLCB7fSwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICB2b2x1bWVfcGVyY2VudDogdm9sdW1lLnRvU3RyaW5nKCksXHJcbiAgICAgICAgZGV2aWNlX2lkOiBkZXZpY2VJZFxyXG4gICAgICB9XHJcbiAgICB9KS5waXBlKFxyXG4gICAgICB0YWtlKDEpLFxyXG4gICAgICBtYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19