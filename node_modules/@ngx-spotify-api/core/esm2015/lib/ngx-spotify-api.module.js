/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { AlbumService, ArtistService, BrowseService, FollowService, LibraryService, PersonalizationService, PlayerService, PlaylistService, SearchService, TrackService, UserService } from './services';
import { httpInterceptorProviders } from './http-interceptors';
import { ApiConfig, AuthorizationConfig } from './models/configs';
export class NgxSpotifyApiModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        config = {
            api: Object.assign({}, new ApiConfig(), config.api),
            authorization: Object.assign({}, new AuthorizationConfig(), config.authorization)
        };
        return {
            ngModule: NgxSpotifyApiModule,
            providers: [
                { provide: AuthorizationConfig, useValue: config.authorization },
                { provide: ApiConfig, useValue: config.api },
            ]
        };
    }
}
NgxSpotifyApiModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                ],
                providers: [
                    ArtistService,
                    AlbumService,
                    BrowseService,
                    FollowService,
                    LibraryService,
                    PersonalizationService,
                    PlayerService,
                    PlaylistService,
                    SearchService,
                    TrackService,
                    UserService,
                    httpInterceptorProviders
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNwb3RpZnktYXBpLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtc3BvdGlmeS1hcGkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtc3BvdGlmeS1hcGkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXNCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUNMLFlBQVksRUFDWixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixjQUFjLEVBQ2Qsc0JBQXNCLEVBQ3RCLGFBQWEsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQ3pFLE1BQU0sWUFBWSxDQUFDO0FBQ3BCLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdELE9BQU8sRUFBQyxTQUFTLEVBQUUsbUJBQW1CLEVBQW1CLE1BQU0sa0JBQWtCLENBQUM7QUFzQmxGLE1BQU0sT0FBTyxtQkFBbUI7Ozs7O0lBQzlCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBd0I7UUFDckMsTUFBTSxHQUFHO1lBQ1AsR0FBRyxvQkFDRSxJQUFJLFNBQVMsRUFBRSxFQUNmLE1BQU0sQ0FBQyxHQUFHLENBQ2Q7WUFDRCxhQUFhLG9CQUNSLElBQUksbUJBQW1CLEVBQUUsRUFDekIsTUFBTSxDQUFDLGFBQWEsQ0FDeEI7U0FDRixDQUFDO1FBQ0YsT0FBTztZQUNMLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFO2dCQUNoRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQVksUUFBUSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUU7YUFDdkQ7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBdkNGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixnQkFBZ0I7aUJBQ2pCO2dCQUNELFNBQVMsRUFBRTtvQkFDVCxhQUFhO29CQUNiLFlBQVk7b0JBQ1osYUFBYTtvQkFDYixhQUFhO29CQUNiLGNBQWM7b0JBQ2Qsc0JBQXNCO29CQUN0QixhQUFhO29CQUNiLGVBQWU7b0JBQ2YsYUFBYTtvQkFDYixZQUFZO29CQUNaLFdBQVc7b0JBQ1gsd0JBQXdCO2lCQUN6QjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7XG4gIEFsYnVtU2VydmljZSxcbiAgQXJ0aXN0U2VydmljZSxcbiAgQnJvd3NlU2VydmljZSxcbiAgRm9sbG93U2VydmljZSxcbiAgTGlicmFyeVNlcnZpY2UsXG4gIFBlcnNvbmFsaXphdGlvblNlcnZpY2UsXG4gIFBsYXllclNlcnZpY2UsIFBsYXlsaXN0U2VydmljZSwgU2VhcmNoU2VydmljZSwgVHJhY2tTZXJ2aWNlLCBVc2VyU2VydmljZVxufSBmcm9tICcuL3NlcnZpY2VzJztcbmltcG9ydCB7aHR0cEludGVyY2VwdG9yUHJvdmlkZXJzfSBmcm9tICcuL2h0dHAtaW50ZXJjZXB0b3JzJztcbmltcG9ydCB7QXBpQ29uZmlnLCBBdXRob3JpemF0aW9uQ29uZmlnLCBTcG90aWZ5QXBpQ29uZmlnfSBmcm9tICcuL21vZGVscy9jb25maWdzJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICBBcnRpc3RTZXJ2aWNlLFxuICAgIEFsYnVtU2VydmljZSxcbiAgICBCcm93c2VTZXJ2aWNlLFxuICAgIEZvbGxvd1NlcnZpY2UsXG4gICAgTGlicmFyeVNlcnZpY2UsXG4gICAgUGVyc29uYWxpemF0aW9uU2VydmljZSxcbiAgICBQbGF5ZXJTZXJ2aWNlLFxuICAgIFBsYXlsaXN0U2VydmljZSxcbiAgICBTZWFyY2hTZXJ2aWNlLFxuICAgIFRyYWNrU2VydmljZSxcbiAgICBVc2VyU2VydmljZSxcbiAgICBodHRwSW50ZXJjZXB0b3JQcm92aWRlcnNcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hTcG90aWZ5QXBpTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBTcG90aWZ5QXBpQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgY29uZmlnID0ge1xuICAgICAgYXBpOiB7XG4gICAgICAgIC4uLm5ldyBBcGlDb25maWcoKSxcbiAgICAgICAgLi4uY29uZmlnLmFwaVxuICAgICAgfSxcbiAgICAgIGF1dGhvcml6YXRpb246IHtcbiAgICAgICAgLi4ubmV3IEF1dGhvcml6YXRpb25Db25maWcoKSxcbiAgICAgICAgLi4uY29uZmlnLmF1dGhvcml6YXRpb25cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4U3BvdGlmeUFwaU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IEF1dGhvcml6YXRpb25Db25maWcsIHVzZVZhbHVlOiBjb25maWcuYXV0aG9yaXphdGlvbiB9LFxuICAgICAgICB7IHByb3ZpZGU6IEFwaUNvbmZpZywgICAgICAgICAgIHVzZVZhbHVlOiBjb25maWcuYXBpIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19