/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { ApiConfig } from '../models/configs/api.config';
import { AuthorizationConfig } from "../models/configs";
export class UnderscoreToCamelcaseInterceptor {
    /**
     * @param {?} apiConfig
     * @param {?} authConfig
     */
    constructor(apiConfig, authConfig) {
        this.apiConfig = apiConfig;
        this.authConfig = authConfig;
    }
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    transformObjectKeysToCamelCase(object) {
        if (object == null || object === {}) {
            return object;
        }
        /** @type {?} */
        const ret = {};
        Object.keys(object).forEach((key) => {
            /** @type {?} */
            const newKey = key.replace(/[_]([^_])?/g, (v) => {
                return v.replace('_', '').toUpperCase();
            });
            if (object[key] instanceof Array) {
                ret[newKey] = object[key].map((value) => {
                    return this.transformObjectKeysToCamelCase(value);
                });
            }
            else if (object[key] instanceof Object) {
                ret[newKey] = this.transformObjectKeysToCamelCase(object[key]);
            }
            else {
                ret[newKey] = object[key];
            }
        });
        return ret;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        return next.handle(req).pipe(map((res) => {
            if (req && req.url && req.url.includes(this.apiConfig.baseUrl) && res.body) {
                return res.clone({
                    body: this.transformObjectKeysToCamelCase(res.body)
                });
            }
            return res;
        }));
    }
}
UnderscoreToCamelcaseInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UnderscoreToCamelcaseInterceptor.ctorParameters = () => [
    { type: ApiConfig },
    { type: AuthorizationConfig }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    UnderscoreToCamelcaseInterceptor.prototype.apiConfig;
    /**
     * @type {?}
     * @private
     */
    UnderscoreToCamelcaseInterceptor.prototype.authConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5kZXJzY29yZVRvQ2FtZWxjYXNlLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1zcG90aWZ5LWFwaS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2h0dHAtaW50ZXJjZXB0b3JzL1VuZGVyc2NvcmVUb0NhbWVsY2FzZS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFDLEdBQUcsRUFBTyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBR3RELE1BQU0sT0FBTyxnQ0FBZ0M7Ozs7O0lBRXpDLFlBQW9CLFNBQW9CLEVBQVUsVUFBK0I7UUFBN0QsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLGVBQVUsR0FBVixVQUFVLENBQXFCO0lBQUcsQ0FBQzs7Ozs7O0lBRTdFLDhCQUE4QixDQUFDLE1BQVc7UUFDOUMsSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDakMsT0FBTyxNQUFNLENBQUM7U0FDakI7O2NBQ0ssR0FBRyxHQUFHLEVBQUU7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFOztrQkFDbEMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQzVDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDNUMsQ0FBQyxDQUFDO1lBQ0YsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksS0FBSyxFQUFFO2dCQUM5QixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO29CQUN6QyxPQUFPLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLENBQUM7YUFDTjtpQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxNQUFNLEVBQUU7Z0JBQ3RDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsOEJBQThCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbEU7aUJBQU07Z0JBQ0gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM3QjtRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFDRCxTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjtRQUM5QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQXNCLEVBQXFCLEVBQUU7WUFDM0UsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3hFLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztvQkFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLDhCQUE4QixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7aUJBQ3RELENBQUMsQ0FBQzthQUNOO1lBQ0QsT0FBTyxHQUFHLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs7O1lBbkNKLFVBQVU7Ozs7WUFISCxTQUFTO1lBQ1QsbUJBQW1COzs7Ozs7O0lBS1gscURBQTRCOzs7OztJQUFFLHNEQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7bWFwLCB0YWtlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QXBpQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMvY29uZmlncy9hcGkuY29uZmlnJztcclxuaW1wb3J0IHtBdXRob3JpemF0aW9uQ29uZmlnfSBmcm9tIFwiLi4vbW9kZWxzL2NvbmZpZ3NcIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFVuZGVyc2NvcmVUb0NhbWVsY2FzZUludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaUNvbmZpZzogQXBpQ29uZmlnLCBwcml2YXRlIGF1dGhDb25maWc6IEF1dGhvcml6YXRpb25Db25maWcpIHt9XHJcblxyXG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1PYmplY3RLZXlzVG9DYW1lbENhc2Uob2JqZWN0OiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCB8fCBvYmplY3QgPT09IHt9KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJldCA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmV3S2V5ID0ga2V5LnJlcGxhY2UoL1tfXShbXl9dKT8vZywgKHYpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2LnJlcGxhY2UoJ18nLCAnJykudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChvYmplY3Rba2V5XSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICByZXRbbmV3S2V5XSA9IG9iamVjdFtrZXldLm1hcCgodmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybU9iamVjdEtleXNUb0NhbWVsQ2FzZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvYmplY3Rba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0W25ld0tleV0gPSB0aGlzLnRyYW5zZm9ybU9iamVjdEtleXNUb0NhbWVsQ2FzZShvYmplY3Rba2V5XSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXRbbmV3S2V5XSA9IG9iamVjdFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuICAgIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG4gICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUobWFwKChyZXM6IEh0dHBSZXNwb25zZTxhbnk+KTogSHR0cFJlc3BvbnNlPGFueT4gPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVxICYmIHJlcS51cmwgJiYgcmVxLnVybC5pbmNsdWRlcyh0aGlzLmFwaUNvbmZpZy5iYXNlVXJsKSAmJiByZXMuYm9keSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5jbG9uZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogdGhpcy50cmFuc2Zvcm1PYmplY3RLZXlzVG9DYW1lbENhc2UocmVzLmJvZHkpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG4iXX0=