/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ApiConfig, AuthorizationConfig } from '../models/configs';
import { flatMap, map } from 'rxjs/operators';
export class AuthInterceptor {
    /**
     * @param {?} apiConfig
     * @param {?} authConfig
     */
    constructor(apiConfig, authConfig) {
        this.apiConfig = apiConfig;
        this.authConfig = authConfig;
    }
    /**
     * @private
     * @param {?} req
     * @return {?}
     */
    attachAuthorizationHeader(req) {
        return this.authConfig.accessToken().pipe(map((token) => {
            return req.clone({
                headers: req.headers.set('Authorization', 'Bearer ' + token)
            });
        }));
    }
    /**
     * @param {?} origReq
     * @param {?} next
     * @return {?}
     */
    intercept(origReq, next) {
        return this.attachAuthorizationHeader(origReq).pipe(flatMap((req) => {
            return next.handle(req);
        }));
    }
}
AuthInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthInterceptor.ctorParameters = () => [
    { type: ApiConfig },
    { type: AuthorizationConfig }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype.apiConfig;
    /**
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype.authConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtc3BvdGlmeS1hcGkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9odHRwLWludGVyY2VwdG9ycy9BdXRoLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRzVDLE1BQU0sT0FBTyxlQUFlOzs7OztJQUV4QixZQUFvQixTQUFvQixFQUNwQixVQUErQjtRQUQvQixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLGVBQVUsR0FBVixVQUFVLENBQXFCO0lBQUcsQ0FBQzs7Ozs7O0lBRS9DLHlCQUF5QixDQUFDLEdBQXFCO1FBQ3JELE9BQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBYSxFQUFvQixFQUFFO1lBQ2pGLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztnQkFDZixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLFNBQVMsR0FBRyxLQUFLLENBQUM7YUFDN0QsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxPQUF5QixFQUFFLElBQWlCO1FBQ2xELE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFxQixFQUE4QixFQUFFO1lBQ2hILE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs7O1lBbEJKLFVBQVU7Ozs7WUFISCxTQUFTO1lBQUUsbUJBQW1COzs7Ozs7O0lBTXRCLG9DQUE0Qjs7Ozs7SUFDNUIscUNBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QXBpQ29uZmlnLCBBdXRob3JpemF0aW9uQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMvY29uZmlncyc7XHJcbmltcG9ydCB7ZmxhdE1hcCwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBdXRoSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpQ29uZmlnOiBBcGlDb25maWcsXHJcbiAgICAgICAgICAgICAgICBwcml2YXRlIGF1dGhDb25maWc6IEF1dGhvcml6YXRpb25Db25maWcpIHt9XHJcblxyXG4gICAgcHJpdmF0ZSBhdHRhY2hBdXRob3JpemF0aW9uSGVhZGVyKHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IE9ic2VydmFibGU8SHR0cFJlcXVlc3Q8YW55Pj4ge1xyXG4gICAgICByZXR1cm4gIHRoaXMuYXV0aENvbmZpZy5hY2Nlc3NUb2tlbigpLnBpcGUobWFwKCh0b2tlbjogc3RyaW5nKTogSHR0cFJlcXVlc3Q8YW55PiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcS5jbG9uZSh7XHJcbiAgICAgICAgICBoZWFkZXJzOiByZXEuaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmVhcmVyICcgKyB0b2tlbilcclxuICAgICAgICB9KTtcclxuICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGludGVyY2VwdChvcmlnUmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2hBdXRob3JpemF0aW9uSGVhZGVyKG9yaWdSZXEpLnBpcGUoZmxhdE1hcCgocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4gPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==