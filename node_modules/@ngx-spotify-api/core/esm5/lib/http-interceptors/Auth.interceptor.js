/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ApiConfig, AuthorizationConfig } from '../models/configs';
import { flatMap, map } from 'rxjs/operators';
var AuthInterceptor = /** @class */ (function () {
    function AuthInterceptor(apiConfig, authConfig) {
        this.apiConfig = apiConfig;
        this.authConfig = authConfig;
    }
    /**
     * @private
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.attachAuthorizationHeader = /**
     * @private
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this.authConfig.accessToken().pipe(map(function (token) {
            return req.clone({
                headers: req.headers.set('Authorization', 'Bearer ' + token)
            });
        }));
    };
    /**
     * @param {?} origReq
     * @param {?} next
     * @return {?}
     */
    AuthInterceptor.prototype.intercept = /**
     * @param {?} origReq
     * @param {?} next
     * @return {?}
     */
    function (origReq, next) {
        return this.attachAuthorizationHeader(origReq).pipe(flatMap(function (req) {
            return next.handle(req);
        }));
    };
    AuthInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthInterceptor.ctorParameters = function () { return [
        { type: ApiConfig },
        { type: AuthorizationConfig }
    ]; };
    return AuthInterceptor;
}());
export { AuthInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype.apiConfig;
    /**
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype.authConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtc3BvdGlmeS1hcGkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9odHRwLWludGVyY2VwdG9ycy9BdXRoLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTVDO0lBR0kseUJBQW9CLFNBQW9CLEVBQ3BCLFVBQStCO1FBRC9CLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsZUFBVSxHQUFWLFVBQVUsQ0FBcUI7SUFBRyxDQUFDOzs7Ozs7SUFFL0MsbURBQXlCOzs7OztJQUFqQyxVQUFrQyxHQUFxQjtRQUNyRCxPQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQWE7WUFDM0QsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUNmLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQzthQUM3RCxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQzs7Ozs7O0lBRUQsbUNBQVM7Ozs7O0lBQVQsVUFBVSxPQUF5QixFQUFFLElBQWlCO1FBQ2xELE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFxQjtZQUNoRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7O2dCQWxCSixVQUFVOzs7O2dCQUhILFNBQVM7Z0JBQUUsbUJBQW1COztJQXNCdEMsc0JBQUM7Q0FBQSxBQW5CRCxJQW1CQztTQWxCWSxlQUFlOzs7Ozs7SUFFWixvQ0FBNEI7Ozs7O0lBQzVCLHFDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0FwaUNvbmZpZywgQXV0aG9yaXphdGlvbkNvbmZpZ30gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZ3MnO1xyXG5pbXBvcnQge2ZsYXRNYXAsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXV0aEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaUNvbmZpZzogQXBpQ29uZmlnLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhdXRoQ29uZmlnOiBBdXRob3JpemF0aW9uQ29uZmlnKSB7fVxyXG5cclxuICAgIHByaXZhdGUgYXR0YWNoQXV0aG9yaXphdGlvbkhlYWRlcihyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBPYnNlcnZhYmxlPEh0dHBSZXF1ZXN0PGFueT4+IHtcclxuICAgICAgcmV0dXJuICB0aGlzLmF1dGhDb25maWcuYWNjZXNzVG9rZW4oKS5waXBlKG1hcCgodG9rZW46IHN0cmluZyk6IEh0dHBSZXF1ZXN0PGFueT4gPT4ge1xyXG4gICAgICAgIHJldHVybiByZXEuY2xvbmUoe1xyXG4gICAgICAgICAgaGVhZGVyczogcmVxLmhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciAnICsgdG9rZW4pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmNlcHQob3JpZ1JlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0YWNoQXV0aG9yaXphdGlvbkhlYWRlcihvcmlnUmVxKS5waXBlKGZsYXRNYXAoKHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+ID0+IHtcclxuICAgICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG4iXX0=