/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { ApiConfig } from '../models/configs/api.config';
import { AuthorizationConfig } from "../models/configs";
var UnderscoreToCamelcaseInterceptor = /** @class */ (function () {
    function UnderscoreToCamelcaseInterceptor(apiConfig, authConfig) {
        this.apiConfig = apiConfig;
        this.authConfig = authConfig;
    }
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    UnderscoreToCamelcaseInterceptor.prototype.transformObjectKeysToCamelCase = /**
     * @private
     * @param {?} object
     * @return {?}
     */
    function (object) {
        var _this = this;
        if (object == null || object === {}) {
            return object;
        }
        /** @type {?} */
        var ret = {};
        Object.keys(object).forEach(function (key) {
            /** @type {?} */
            var newKey = key.replace(/[_]([^_])?/g, function (v) {
                return v.replace('_', '').toUpperCase();
            });
            if (object[key] instanceof Array) {
                ret[newKey] = object[key].map(function (value) {
                    return _this.transformObjectKeysToCamelCase(value);
                });
            }
            else if (object[key] instanceof Object) {
                ret[newKey] = _this.transformObjectKeysToCamelCase(object[key]);
            }
            else {
                ret[newKey] = object[key];
            }
        });
        return ret;
    };
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    UnderscoreToCamelcaseInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        return next.handle(req).pipe(map(function (res) {
            if (req && req.url && req.url.includes(_this.apiConfig.baseUrl) && res.body) {
                return res.clone({
                    body: _this.transformObjectKeysToCamelCase(res.body)
                });
            }
            return res;
        }));
    };
    UnderscoreToCamelcaseInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UnderscoreToCamelcaseInterceptor.ctorParameters = function () { return [
        { type: ApiConfig },
        { type: AuthorizationConfig }
    ]; };
    return UnderscoreToCamelcaseInterceptor;
}());
export { UnderscoreToCamelcaseInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UnderscoreToCamelcaseInterceptor.prototype.apiConfig;
    /**
     * @type {?}
     * @private
     */
    UnderscoreToCamelcaseInterceptor.prototype.authConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5kZXJzY29yZVRvQ2FtZWxjYXNlLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1zcG90aWZ5LWFwaS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2h0dHAtaW50ZXJjZXB0b3JzL1VuZGVyc2NvcmVUb0NhbWVsY2FzZS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFDLEdBQUcsRUFBTyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRXREO0lBR0ksMENBQW9CLFNBQW9CLEVBQVUsVUFBK0I7UUFBN0QsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLGVBQVUsR0FBVixVQUFVLENBQXFCO0lBQUcsQ0FBQzs7Ozs7O0lBRTdFLHlFQUE4Qjs7Ozs7SUFBdEMsVUFBdUMsTUFBVztRQUFsRCxpQkFvQkM7UUFuQkcsSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDakMsT0FBTyxNQUFNLENBQUM7U0FDakI7O1lBQ0ssR0FBRyxHQUFHLEVBQUU7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQVc7O2dCQUM5QixNQUFNLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsVUFBQyxDQUFDO2dCQUN4QyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzVDLENBQUMsQ0FBQztZQUNGLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEtBQUssRUFBRTtnQkFDOUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxLQUFVO29CQUNyQyxPQUFPLEtBQUksQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLENBQUM7YUFDTjtpQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxNQUFNLEVBQUU7Z0JBQ3RDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFJLENBQUMsOEJBQThCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbEU7aUJBQU07Z0JBQ0gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM3QjtRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFDRCxvREFBUzs7Ozs7SUFBVCxVQUFVLEdBQXFCLEVBQUUsSUFBaUI7UUFBbEQsaUJBU0M7UUFSRyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQXNCO1lBQ3BELElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFO2dCQUN4RSxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUM7b0JBQ2IsSUFBSSxFQUFFLEtBQUksQ0FBQyw4QkFBOEIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO2lCQUN0RCxDQUFDLENBQUM7YUFDTjtZQUNELE9BQU8sR0FBRyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7O2dCQW5DSixVQUFVOzs7O2dCQUhILFNBQVM7Z0JBQ1QsbUJBQW1COztJQXNDM0IsdUNBQUM7Q0FBQSxBQXBDRCxJQW9DQztTQW5DWSxnQ0FBZ0M7Ozs7OztJQUU3QixxREFBNEI7Ozs7O0lBQUUsc0RBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2V9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHttYXAsIHRha2V9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtBcGlDb25maWd9IGZyb20gJy4uL21vZGVscy9jb25maWdzL2FwaS5jb25maWcnO1xyXG5pbXBvcnQge0F1dGhvcml6YXRpb25Db25maWd9IGZyb20gXCIuLi9tb2RlbHMvY29uZmlnc1wiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVW5kZXJzY29yZVRvQ2FtZWxjYXNlSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpQ29uZmlnOiBBcGlDb25maWcsIHByaXZhdGUgYXV0aENvbmZpZzogQXV0aG9yaXphdGlvbkNvbmZpZykge31cclxuXHJcbiAgICBwcml2YXRlIHRyYW5zZm9ybU9iamVjdEtleXNUb0NhbWVsQ2FzZShvYmplY3Q6IGFueSk6IGFueSB7XHJcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsIHx8IG9iamVjdCA9PT0ge30pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmV0ID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdLZXkgPSBrZXkucmVwbGFjZSgvW19dKFteX10pPy9nLCAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHYucmVwbGFjZSgnXycsICcnKS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKG9iamVjdFtrZXldIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHJldFtuZXdLZXldID0gb2JqZWN0W2tleV0ubWFwKCh2YWx1ZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtT2JqZWN0S2V5c1RvQ2FtZWxDYXNlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9iamVjdFtrZXldIGluc3RhbmNlb2YgT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXRbbmV3S2V5XSA9IHRoaXMudHJhbnNmb3JtT2JqZWN0S2V5c1RvQ2FtZWxDYXNlKG9iamVjdFtrZXldKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldFtuZXdLZXldID0gb2JqZWN0W2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShtYXAoKHJlczogSHR0cFJlc3BvbnNlPGFueT4pOiBIdHRwUmVzcG9uc2U8YW55PiA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZXEgJiYgcmVxLnVybCAmJiByZXEudXJsLmluY2x1ZGVzKHRoaXMuYXBpQ29uZmlnLmJhc2VVcmwpICYmIHJlcy5ib2R5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmNsb25lKHtcclxuICAgICAgICAgICAgICAgICAgICBib2R5OiB0aGlzLnRyYW5zZm9ybU9iamVjdEtleXNUb0NhbWVsQ2FzZShyZXMuYm9keSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==