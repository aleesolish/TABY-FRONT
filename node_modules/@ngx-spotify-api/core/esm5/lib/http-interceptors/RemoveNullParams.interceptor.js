/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ApiConfig } from '../models/configs';
var RemoveNullParamsInterceptor = /** @class */ (function () {
    function RemoveNullParamsInterceptor(apiConfig) {
        this.apiConfig = apiConfig;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    RemoveNullParamsInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        /** @type {?} */
        var params = new HttpParams();
        if (req.url.indexOf(this.apiConfig.baseUrl) > -1) {
            params.keys().forEach(function (key) {
                /** @type {?} */
                var param = params.get(key);
                if (param != null && param !== 'null' && param !== 'undefined' && param !== '') {
                    params.set(key, param);
                }
            });
        }
        /** @type {?} */
        var newReq = req.clone({
            'params': params
        });
        return next.handle(newReq);
    };
    RemoveNullParamsInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RemoveNullParamsInterceptor.ctorParameters = function () { return [
        { type: ApiConfig }
    ]; };
    return RemoveNullParamsInterceptor;
}());
export { RemoveNullParamsInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RemoveNullParamsInterceptor.prototype.apiConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVtb3ZlTnVsbFBhcmFtcy5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtc3BvdGlmeS1hcGkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9odHRwLWludGVyY2VwdG9ycy9SZW1vdmVOdWxsUGFyYW1zLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQTBDLFVBQVUsRUFBYyxNQUFNLHNCQUFzQixDQUFDO0FBRXRHLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRTVDO0lBRUUscUNBQW9CLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFFeEMsQ0FBQzs7Ozs7O0lBQ0QsK0NBQVM7Ozs7O0lBQVQsVUFBVSxHQUFxQixFQUFFLElBQWlCOztZQUMxQyxNQUFNLEdBQWUsSUFBSSxVQUFVLEVBQUU7UUFDM0MsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2hELE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFXOztvQkFDMUIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO2dCQUM3QixJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLE1BQU0sSUFBSSxLQUFLLEtBQUssV0FBVyxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7b0JBQzlFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUN4QjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7O1lBQ0ssTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDdkIsUUFBUSxFQUFFLE1BQU07U0FDakIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDOztnQkFuQkYsVUFBVTs7OztnQkFGSCxTQUFTOztJQXNCakIsa0NBQUM7Q0FBQSxBQXBCRCxJQW9CQztTQW5CWSwyQkFBMkI7Ozs7OztJQUMxQixnREFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFBhcmFtcywgSHR0cFJlcXVlc3R9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtBcGlDb25maWd9IGZyb20gJy4uL21vZGVscy9jb25maWdzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFJlbW92ZU51bGxQYXJhbXNJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlDb25maWc6IEFwaUNvbmZpZykge1xyXG5cclxuICB9XHJcbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICBjb25zdCBwYXJhbXM6IEh0dHBQYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xyXG4gICAgaWYgKHJlcS51cmwuaW5kZXhPZih0aGlzLmFwaUNvbmZpZy5iYXNlVXJsKSA+IC0xKSB7XHJcbiAgICAgIHBhcmFtcy5rZXlzKCkuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBwYXJhbSA9IHBhcmFtcy5nZXQoa2V5KTtcclxuICAgICAgICBpZiAocGFyYW0gIT0gbnVsbCAmJiBwYXJhbSAhPT0gJ251bGwnICYmIHBhcmFtICE9PSAndW5kZWZpbmVkJyAmJiBwYXJhbSAhPT0gJycpIHtcclxuICAgICAgICAgIHBhcmFtcy5zZXQoa2V5LCBwYXJhbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5ld1JlcSA9IHJlcS5jbG9uZSh7XHJcbiAgICAgICdwYXJhbXMnOiBwYXJhbXNcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKG5ld1JlcSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==