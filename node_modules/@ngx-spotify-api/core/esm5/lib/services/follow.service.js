/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { ApiConfig } from '../models';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var FollowService = /** @class */ (function () {
    function FollowService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.isFollowingArtists = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/me/following/contains', {
            params: {
                type: 'artist',
                ids: ids.join(',')
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.isFollowingUsers = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/me/following/contains', {
            params: {
                type: 'user',
                ids: ids.join(',')
            }
        });
    };
    /**
     * @param {?} playlistId
     * @param {?} usersToCheck
     * @return {?}
     */
    FollowService.prototype.areFollowingPlaylist = /**
     * @param {?} playlistId
     * @param {?} usersToCheck
     * @return {?}
     */
    function (playlistId, usersToCheck) {
        if (usersToCheck === null || usersToCheck.length === 0) {
            return of([]);
        }
        else if (usersToCheck.length > 5) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + ("/v1/playlists/" + playlistId + "/followers/contains"), {
            params: {
                ids: usersToCheck.join(',')
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.followArtists = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + '/v1/me/following', {}, {
            params: {
                type: 'artist',
                ids: ids.join(',')
            }
        }).pipe(map(function () {
            return true;
        }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.followUsers = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + '/v1/me/following', {}, {
            params: {
                type: 'user',
                ids: ids.join(',')
            }
        }).pipe(map(function () {
            return true;
        }));
    };
    /**
     * @param {?} id
     * @param {?=} isPublic
     * @return {?}
     */
    FollowService.prototype.followPlaylist = /**
     * @param {?} id
     * @param {?=} isPublic
     * @return {?}
     */
    function (id, isPublic) {
        if (isPublic === void 0) { isPublic = false; }
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/followers"), {
            public: isPublic
        }).pipe(map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} limit
     * @param {?=} after
     * @return {?}
     */
    FollowService.prototype.getFollowedArtists = /**
     * @param {?=} limit
     * @param {?=} after
     * @return {?}
     */
    function (limit, after) {
        if (limit === void 0) { limit = 20; }
        return this.http.get(this.config.baseUrl + "/v1/me/following", {
            params: {
                type: 'artist',
                limit: limit.toString(),
                after: after
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.unfollowArtists = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + '/v1/me/following', {
            params: {
                type: 'artist',
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.unfollowUsers = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + '/v1/me/following', {
            params: {
                type: 'user',
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    FollowService.prototype.unfollowPlaylist = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.delete(this.config.baseUrl + ("/v1/playlists/" + id + "/followers")).pipe(map(function () { return true; }));
    };
    FollowService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FollowService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ FollowService.ngInjectableDef = i0.defineInjectable({ factory: function FollowService_Factory() { return new FollowService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: FollowService, providedIn: "root" });
    return FollowService;
}());
export { FollowService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FollowService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    FollowService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,