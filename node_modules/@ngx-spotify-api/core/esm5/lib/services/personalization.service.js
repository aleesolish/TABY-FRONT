/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var PersonalizationService = /** @class */ (function () {
    function PersonalizationService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} timeRange
     * @return {?}
     */
    PersonalizationService.prototype.getTopArtists = /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} timeRange
     * @return {?}
     */
    function (limit, offset, timeRange) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/top/artists", {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                time_range: timeRange
            }
        });
    };
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} timeRange
     * @return {?}
     */
    PersonalizationService.prototype.getTopTracks = /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} timeRange
     * @return {?}
     */
    function (limit, offset, timeRange) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/top/tracks", {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                time_range: timeRange
            }
        });
    };
    PersonalizationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PersonalizationService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PersonalizationService.ngInjectableDef = i0.defineInjectable({ factory: function PersonalizationService_Factory() { return new PersonalizationService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: PersonalizationService, providedIn: "root" });
    return PersonalizationService;
}());
export { PersonalizationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PersonalizationService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    PersonalizationService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc29uYWxpemF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNwb3RpZnktYXBpL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvcGVyc29uYWxpemF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSW5ELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDOzs7O0FBRXBDO0lBS0UsZ0NBQWdDLE1BQWlCLEVBQzdCLElBQWdCO1FBREosV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUM3QixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQzs7Ozs7OztJQUVsQyw4Q0FBYTs7Ozs7O0lBQXBCLFVBQXFCLEtBQWtCLEVBQUUsTUFBa0IsRUFBRSxTQUFzRDtRQUE5RixzQkFBQSxFQUFBLFVBQWtCO1FBQUUsdUJBQUEsRUFBQSxVQUFrQjtRQUN6RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFpQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsRUFBRTtZQUMvRSxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ3ZCLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUN6QixVQUFVLEVBQUUsU0FBUzthQUN0QjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7SUFDTSw2Q0FBWTs7Ozs7O0lBQW5CLFVBQW9CLEtBQWtCLEVBQUUsTUFBa0IsRUFBRSxTQUFzRDtRQUE5RixzQkFBQSxFQUFBLFVBQWtCO1FBQUUsdUJBQUEsRUFBQSxVQUFrQjtRQUN4RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsRUFBRTtZQUM3RSxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ3ZCLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUN6QixVQUFVLEVBQUUsU0FBUzthQUN0QjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQXpCRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQUpPLFNBQVMsdUJBT0YsUUFBUTtnQkFUZixVQUFVOzs7aUNBSmxCO0NBa0NDLEFBMUJELElBMEJDO1NBdkJZLHNCQUFzQjs7Ozs7O0lBRXJCLHdDQUFxQzs7Ozs7SUFDckMsc0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7UGFnaW5nfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge0FydGlzdH0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7VHJhY2t9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7QXBpQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUGVyc29uYWxpemF0aW9uU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgY29uZmlnOiBBcGlDb25maWcsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgcHVibGljIGdldFRvcEFydGlzdHMobGltaXQ6IG51bWJlciA9IDIwLCBvZmZzZXQ6IG51bWJlciA9IDAsIHRpbWVSYW5nZT86ICdsb25nX3Rlcm0nIHwgJ21lZGl1bV90ZXJtJyB8ICdzaG9ydF90ZXJtJyk6IE9ic2VydmFibGU8UGFnaW5nPEFydGlzdD4+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBhZ2luZzxBcnRpc3Q+Pih0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9tZS90b3AvYXJ0aXN0c2AsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgbGltaXQ6IGxpbWl0LnRvU3RyaW5nKCksXHJcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQudG9TdHJpbmcoKSxcclxuICAgICAgICB0aW1lX3JhbmdlOiB0aW1lUmFuZ2VcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHB1YmxpYyBnZXRUb3BUcmFja3MobGltaXQ6IG51bWJlciA9IDIwLCBvZmZzZXQ6IG51bWJlciA9IDAsIHRpbWVSYW5nZT86ICdsb25nX3Rlcm0nIHwgJ21lZGl1bV90ZXJtJyB8ICdzaG9ydF90ZXJtJyk6IE9ic2VydmFibGU8UGFnaW5nPFRyYWNrPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UGFnaW5nPFRyYWNrPj4odGhpcy5jb25maWcuYmFzZVVybCArIGAvdjEvbWUvdG9wL3RyYWNrc2AsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgbGltaXQ6IGxpbWl0LnRvU3RyaW5nKCksXHJcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQudG9TdHJpbmcoKSxcclxuICAgICAgICB0aW1lX3JhbmdlOiB0aW1lUmFuZ2VcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==