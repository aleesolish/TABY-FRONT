/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var TrackService = /** @class */ (function () {
    function TrackService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    TrackService.prototype.getTrack = /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    function (id, market) {
        return this.http.get(this.config.baseUrl + ("/v1/tracks/" + id), {
            params: {
                market: market
            }
        });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TrackService.prototype.getAudioFeatures = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + ("/v1/audio-features/" + id));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TrackService.prototype.getAudioAnalysis = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + ("/v1/audio-analysis/" + id));
    };
    /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    TrackService.prototype.getTracks = /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    function (ids, market) {
        if (ids === undefined || ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + "/v1/tracks", {
            params: {
                ids: ids.join(','),
                market: market || ''
            }
        }).pipe(map(function (_a) {
            var tracks = _a.tracks;
            return tracks;
        }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    TrackService.prototype.getSeveralAudioFeatures = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === undefined || ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + "/v1/audio-features", {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function (_a) {
            var audioFeatures = _a.audioFeatures;
            return audioFeatures;
        }));
    };
    TrackService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TrackService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ TrackService.ngInjectableDef = i0.defineInjectable({ factory: function TrackService_Factory() { return new TrackService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: TrackService, providedIn: "root" });
    return TrackService;
}());
export { TrackService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TrackService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    TrackService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtc3BvdGlmeS1hcGkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90cmFjay5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFhLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUlwQyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7OztBQUVwQztJQUtFLHNCQUFnQyxNQUFpQixFQUM3QixJQUFnQjtRQURKLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDN0IsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7Ozs7OztJQUVsQywrQkFBUTs7Ozs7SUFBZixVQUFnQixFQUFVLEVBQUUsTUFBZTtRQUN6QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFHLGdCQUFjLEVBQUksQ0FBQSxFQUFFO1lBQ3BFLE1BQU0sRUFBRTtnQkFDTixNQUFNLFFBQUE7YUFDUDtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRU0sdUNBQWdCOzs7O0lBQXZCLFVBQXdCLEVBQVU7UUFDaEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUcsd0JBQXNCLEVBQUksQ0FBQSxDQUFDLENBQUM7SUFDeEYsQ0FBQzs7Ozs7SUFFTSx1Q0FBZ0I7Ozs7SUFBdkIsVUFBd0IsRUFBVTtRQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBRyx3QkFBc0IsRUFBSSxDQUFBLENBQUMsQ0FBQztJQUN4RixDQUFDOzs7Ozs7SUFFTSxnQ0FBUzs7Ozs7SUFBaEIsVUFBaUIsR0FBYSxFQUFFLE1BQWU7UUFDN0MsSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDekQsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDZjthQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUU7WUFDMUIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFvQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxZQUFZLEVBQUU7WUFDMUUsTUFBTSxFQUFFO2dCQUNOLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDbEIsTUFBTSxFQUFFLE1BQU0sSUFBSSxFQUFFO2FBQ3JCO1NBQ0YsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxFQUFVO2dCQUFSLGtCQUFNO1lBQWdCLE9BQUEsTUFBTTtRQUFOLENBQU0sQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFTSw4Q0FBdUI7Ozs7SUFBOUIsVUFBK0IsR0FBYTtRQUMxQyxJQUFJLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6RCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNmO2FBQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRTtZQUMxQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQjtRQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQW1DLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLG9CQUFvQixFQUFFO1lBQ2pHLE1BQU0sRUFBRTtnQkFDTixHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7YUFDbkI7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEVBQWlCO2dCQUFmLGdDQUFhO1lBQXdCLE9BQUEsYUFBYTtRQUFiLENBQWEsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQzs7Z0JBbkRGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBSk8sU0FBUyx1QkFPRixRQUFRO2dCQWJmLFVBQVU7Ozt1QkFEbEI7Q0E2REMsQUFwREQsSUFvREM7U0FqRFksWUFBWTs7Ozs7O0lBRVgsOEJBQXFDOzs7OztJQUNyQyw0QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2Z9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge1RyYWNrfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge0F1ZGlvRmVhdHVyZXN9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7QXVkaW9BbmFseXNpc30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHtBcGlDb25maWd9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmFja1NlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGNvbmZpZzogQXBpQ29uZmlnLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gIHB1YmxpYyBnZXRUcmFjayhpZDogc3RyaW5nLCBtYXJrZXQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFRyYWNrPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxUcmFjaz4odGhpcy5jb25maWcuYmFzZVVybCArIGAvdjEvdHJhY2tzLyR7aWR9YCwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBtYXJrZXRcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0QXVkaW9GZWF0dXJlcyhpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxBdWRpb0ZlYXR1cmVzPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxBdWRpb0ZlYXR1cmVzPih0aGlzLmNvbmZpZy5iYXNlVXJsICsgYC92MS9hdWRpby1mZWF0dXJlcy8ke2lkfWApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEF1ZGlvQW5hbHlzaXMoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8QXVkaW9BbmFseXNpcz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8QXVkaW9BbmFseXNpcz4odGhpcy5jb25maWcuYmFzZVVybCArIGAvdjEvYXVkaW8tYW5hbHlzaXMvJHtpZH1gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRUcmFja3MoaWRzOiBzdHJpbmdbXSwgbWFya2V0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxUcmFja1tdPiB7XHJcbiAgICBpZiAoaWRzID09PSB1bmRlZmluZWQgfHwgaWRzID09PSBudWxsIHx8IGlkcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIG9mKFtdKTtcclxuICAgIH0gZWxzZSBpZiAoaWRzLmxlbmd0aCA+IDUwKSB7XHJcbiAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDx7dHJhY2tzOiBUcmFja1tdfT4odGhpcy5jb25maWcuYmFzZVVybCArIGAvdjEvdHJhY2tzYCwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBpZHM6IGlkcy5qb2luKCcsJyksXHJcbiAgICAgICAgbWFya2V0OiBtYXJrZXQgfHwgJydcclxuICAgICAgfVxyXG4gICAgfSkucGlwZShtYXAoKHsgdHJhY2tzIH0pOiBUcmFja1tdID0+IHRyYWNrcykpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFNldmVyYWxBdWRpb0ZlYXR1cmVzKGlkczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPEF1ZGlvRmVhdHVyZXNbXT4ge1xyXG4gICAgaWYgKGlkcyA9PT0gdW5kZWZpbmVkIHx8IGlkcyA9PT0gbnVsbCB8fCBpZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBvZihbXSk7XHJcbiAgICB9IGVsc2UgaWYgKGlkcy5sZW5ndGggPiA1MCkge1xyXG4gICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8e2F1ZGlvRmVhdHVyZXM6IEF1ZGlvRmVhdHVyZXNbXX0+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL2F1ZGlvLWZlYXR1cmVzYCwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBpZHM6IGlkcy5qb2luKCcsJylcclxuICAgICAgfVxyXG4gICAgfSkucGlwZShtYXAoKHsgYXVkaW9GZWF0dXJlcyB9KTogQXVkaW9GZWF0dXJlc1tdID0+IGF1ZGlvRmVhdHVyZXMpKTtcclxuICB9XHJcbn1cclxuIl19