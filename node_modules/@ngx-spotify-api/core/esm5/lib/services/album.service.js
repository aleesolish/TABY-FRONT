/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var AlbumsResponse = /** @class */ (function () {
    function AlbumsResponse() {
    }
    return AlbumsResponse;
}());
if (false) {
    /** @type {?} */
    AlbumsResponse.prototype.albums;
}
var AlbumService = /** @class */ (function () {
    function AlbumService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    AlbumService.prototype.getAlbum = /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    function (id, market) {
        return this.http.get(this.config.baseUrl + '/v1/albums/' + id, {
            params: {
                market: market
            }
        });
    };
    /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    AlbumService.prototype.getAlbumTracks = /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    function (id, limit, offset, market) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/albums/' + id + '/tracks', {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    };
    /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    AlbumService.prototype.getAlbums = /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    function (ids, market) {
        if (ids == null || ids.length < 1) {
            return of([]);
        }
        else if (ids.length > 20) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/albums', {
            params: {
                ids: ids.join(','),
                market: market
            }
        }).pipe(map(function (res) {
            return res.albums;
        }));
    };
    AlbumService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AlbumService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ AlbumService.ngInjectableDef = i0.defineInjectable({ factory: function AlbumService_Factory() { return new AlbumService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: AlbumService, providedIn: "root" });
    return AlbumService;
}());
export { AlbumService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlbumService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    AlbumService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxidW0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtc3BvdGlmeS1hcGkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hbGJ1bS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFhLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUVwQyxPQUFPLEVBQUMsR0FBRyxFQUFNLE1BQU0sZ0JBQWdCLENBQUM7QUFHeEMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7OztBQUVwQztJQUFBO0lBRUEsQ0FBQztJQUFELHFCQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7OztJQURDLGdDQUFnQjs7QUFHbEI7SUFLRSxzQkFBZ0MsTUFBaUIsRUFDN0IsSUFBZ0I7UUFESixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQzdCLFNBQUksR0FBSixJQUFJLENBQVk7SUFDcEMsQ0FBQzs7Ozs7O0lBRUQsK0JBQVE7Ozs7O0lBQVIsVUFBUyxFQUFVLEVBQUUsTUFBZTtRQUNsQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLGFBQWEsR0FBRyxFQUFFLEVBQUU7WUFDcEUsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7OztJQUVELHFDQUFjOzs7Ozs7O0lBQWQsVUFBZSxFQUFVLEVBQUUsS0FBa0IsRUFBRSxNQUFrQixFQUFFLE1BQWU7UUFBdkQsc0JBQUEsRUFBQSxVQUFrQjtRQUFFLHVCQUFBLEVBQUEsVUFBa0I7UUFDL0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxHQUFHLEVBQUUsR0FBRyxTQUFTLEVBQUU7WUFDeEYsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFO2dCQUN2QixNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDekIsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQUVELGdDQUFTOzs7OztJQUFULFVBQVUsR0FBYSxFQUFFLE1BQWU7UUFDdEMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2Y7YUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBaUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsWUFBWSxFQUFFO1lBQ3ZFLE1BQU0sRUFBRTtnQkFDTixHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ2xCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQW1CO1lBQzlCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQzs7Z0JBMUNGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBUk8sU0FBUyx1QkFXRixRQUFRO2dCQWpCZixVQUFVOzs7dUJBRGxCO0NBd0RDLEFBM0NELElBMkNDO1NBeENZLFlBQVk7Ozs7OztJQUVYLDhCQUFxQzs7Ozs7SUFDckMsNEJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQge09ic2VydmFibGUsIG9mfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtBbGJ1bX0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHttYXAsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge1BhZ2luZ30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtUcmFja30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtBcGlDb25maWd9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5jbGFzcyBBbGJ1bXNSZXNwb25zZSB7XHJcbiAgYWxidW1zOiBBbGJ1bVtdO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBbGJ1bVNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGNvbmZpZzogQXBpQ29uZmlnLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xyXG4gIH1cclxuXHJcbiAgZ2V0QWxidW0oaWQ6IHN0cmluZywgbWFya2V0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxBbGJ1bT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8QWxidW0+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyAnL3YxL2FsYnVtcy8nICsgaWQsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgbWFya2V0OiBtYXJrZXRcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRBbGJ1bVRyYWNrcyhpZDogc3RyaW5nLCBsaW1pdDogbnVtYmVyID0gMjAsIG9mZnNldDogbnVtYmVyID0gMCwgbWFya2V0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxQYWdpbmc8VHJhY2s+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxQYWdpbmc8VHJhY2s+Pih0aGlzLmNvbmZpZy5iYXNlVXJsICsgJy92MS9hbGJ1bXMvJyArIGlkICsgJy90cmFja3MnLCB7XHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGxpbWl0OiBsaW1pdC50b1N0cmluZygpLFxyXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LnRvU3RyaW5nKCksXHJcbiAgICAgICAgbWFya2V0OiBtYXJrZXRcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRBbGJ1bXMoaWRzOiBzdHJpbmdbXSwgbWFya2V0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxBbGJ1bVtdPiB7XHJcbiAgICBpZiAoaWRzID09IG51bGwgfHwgaWRzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIG9mKFtdKTtcclxuICAgIH0gZWxzZSBpZiAoaWRzLmxlbmd0aCA+IDIwKSB7XHJcbiAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxBbGJ1bXNSZXNwb25zZT4odGhpcy5jb25maWcuYmFzZVVybCArICcvdjEvYWxidW1zJywge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBpZHM6IGlkcy5qb2luKCcsJyksXHJcbiAgICAgICAgbWFya2V0OiBtYXJrZXRcclxuICAgICAgfVxyXG4gICAgfSkucGlwZShtYXAoKHJlczogQWxidW1zUmVzcG9uc2UpOiBBbGJ1bVtdID0+IHtcclxuICAgICAgcmV0dXJuIHJlcy5hbGJ1bXM7XHJcbiAgICB9KSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==