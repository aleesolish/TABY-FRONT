/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var SearchService = /** @class */ (function () {
    function SearchService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} searchTerms
     * @param {?} types
     * @param {?=} market
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} includeExternal
     * @return {?}
     */
    SearchService.prototype.search = /**
     * @param {?} searchTerms
     * @param {?} types
     * @param {?=} market
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} includeExternal
     * @return {?}
     */
    function (searchTerms, types, market, limit, offset, includeExternal) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/search", {
            params: {
                q: encodeURIComponent(searchTerms),
                type: types.join(','),
                market: market,
                limit: limit.toString(),
                offset: offset.toString(),
                include_external: includeExternal ? 'audio' : undefined
            }
        });
    };
    SearchService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SearchService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ SearchService.ngInjectableDef = i0.defineInjectable({ factory: function SearchService_Factory() { return new SearchService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: SearchService, providedIn: "root" });
    return SearchService;
}());
export { SearchService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    SearchService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNwb3RpZnktYXBpL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvc2VhcmNoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUdoRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDOzs7O0FBRXBDO0lBS0UsdUJBQWdDLE1BQWlCLEVBQzdCLElBQWdCO1FBREosV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUM3QixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQzs7Ozs7Ozs7OztJQUVsQyw4QkFBTTs7Ozs7Ozs7O0lBQWIsVUFBYyxXQUFtQixFQUFFLEtBQW9ELEVBQUUsTUFBZSxFQUFFLEtBQWtCLEVBQUUsTUFBa0IsRUFBRSxlQUF5QjtRQUFqRSxzQkFBQSxFQUFBLFVBQWtCO1FBQUUsdUJBQUEsRUFBQSxVQUFrQjtRQUM5SSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFlBQVksRUFBRTtZQUNyRSxNQUFNLEVBQUU7Z0JBQ04sQ0FBQyxFQUFFLGtCQUFrQixDQUFDLFdBQVcsQ0FBQztnQkFDbEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2dCQUNyQixNQUFNLEVBQUUsTUFBTTtnQkFDZCxLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDdkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Z0JBQ3pCLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTO2FBQ3hEO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBbkJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBSk8sU0FBUyx1QkFPRixRQUFRO2dCQVZmLFVBQVU7Ozt3QkFEbEI7Q0EwQkMsQUFwQkQsSUFvQkM7U0FqQlksYUFBYTs7Ozs7O0lBRVosK0JBQXFDOzs7OztJQUNyQyw2QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7U2VhcmNoUmVzdWx0fSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge0FwaUNvbmZpZ30gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNlYXJjaFNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGNvbmZpZzogQXBpQ29uZmlnLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gIHB1YmxpYyBzZWFyY2goc2VhcmNoVGVybXM6IHN0cmluZywgdHlwZXM6ICgnYWxidW0nIHwgJ2FydGlzdCcgfCAndHJhY2snIHwgJ3BsYXlsaXN0JylbXSwgbWFya2V0Pzogc3RyaW5nLCBsaW1pdDogbnVtYmVyID0gMjAsIG9mZnNldDogbnVtYmVyID0gMCwgaW5jbHVkZUV4dGVybmFsPzogYm9vbGVhbik6IE9ic2VydmFibGU8U2VhcmNoUmVzdWx0PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxTZWFyY2hSZXN1bHQ+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL3NlYXJjaGAsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgcTogZW5jb2RlVVJJQ29tcG9uZW50KHNlYXJjaFRlcm1zKSxcclxuICAgICAgICB0eXBlOiB0eXBlcy5qb2luKCcsJyksXHJcbiAgICAgICAgbWFya2V0OiBtYXJrZXQsXHJcbiAgICAgICAgbGltaXQ6IGxpbWl0LnRvU3RyaW5nKCksXHJcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQudG9TdHJpbmcoKSxcclxuICAgICAgICBpbmNsdWRlX2V4dGVybmFsOiBpbmNsdWRlRXh0ZXJuYWwgPyAnYXVkaW8nIDogdW5kZWZpbmVkXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=