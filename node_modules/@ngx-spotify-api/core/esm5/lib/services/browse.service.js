/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var PlaylistList = /** @class */ (function () {
    function PlaylistList() {
    }
    return PlaylistList;
}());
if (false) {
    /** @type {?} */
    PlaylistList.prototype.playlists;
}
var CategoryList = /** @class */ (function () {
    function CategoryList() {
    }
    return CategoryList;
}());
if (false) {
    /** @type {?} */
    CategoryList.prototype.categories;
}
var BrowseService = /** @class */ (function () {
    function BrowseService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} locale
     * @return {?}
     */
    BrowseService.prototype.getCategory = /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} locale
     * @return {?}
     */
    function (id, country, locale) {
        return this.http.get(this.config.baseUrl + '/v1/browse/categories/' + id, {
            params: {
                country: country,
                locale: locale
            }
        });
    };
    /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    BrowseService.prototype.getCategoryPlaylists = /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (id, country, limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/browse/categories/' + id + '/playlists', {
            params: {
                country: country,
                limit: limit.toString(),
                offset: offset.toString()
            }
        }).pipe(map(function (res) {
            return res.playlists;
        }));
    };
    /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    BrowseService.prototype.getCategories = /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (country, locale, limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/browse/categories', {
            params: {
                country: country,
                locale: locale,
                limit: limit.toString(),
                offset: offset.toString()
            }
        }).pipe(map(function (list) {
            return list.categories;
        }));
    };
    /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} timestamp
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    BrowseService.prototype.getFeaturedPlaylists = /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} timestamp
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (country, locale, timestamp, limit, offset) {
        if (timestamp === void 0) { timestamp = new Date(); }
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/browse/featured-playlists', {
            params: {
                country: country,
                locale: locale,
                timestamp: timestamp.toISOString(),
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    };
    /**
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    BrowseService.prototype.getNewReleases = /**
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (country, limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/browse/new-releases', {
            params: {
                country: country,
                limit: limit.toString(),
                offset: offset.toString()
            }
        }).pipe(map(function (_a) {
            var albums = _a.albums;
            return albums;
        }));
    };
    BrowseService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    BrowseService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ BrowseService.ngInjectableDef = i0.defineInjectable({ factory: function BrowseService_Factory() { return new BrowseService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: BrowseService, providedIn: "root" });
    return BrowseService;
}());
export { BrowseService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BrowseService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    BrowseService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3NlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXNwb3RpZnktYXBpL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYnJvd3NlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUloRCxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFLbkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7OztBQUdwQztJQUFBO0lBRUEsQ0FBQztJQUFELG1CQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7OztJQURDLGlDQUFzQzs7QUFHeEM7SUFBQTtJQUVBLENBQUM7SUFBRCxtQkFBQztBQUFELENBQUMsQUFGRCxJQUVDOzs7SUFEQyxrQ0FBNkI7O0FBRy9CO0lBS0UsdUJBQWdDLE1BQWlCLEVBQzdCLElBQWdCO1FBREosV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUM3QixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQzs7Ozs7OztJQUVsQyxtQ0FBVzs7Ozs7O0lBQWxCLFVBQW1CLEVBQVUsRUFBRSxPQUFnQixFQUFFLE1BQWU7UUFDOUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyx3QkFBd0IsR0FBRyxFQUFFLEVBQUU7WUFDbEYsTUFBTSxFQUFFO2dCQUNOLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixNQUFNLEVBQUUsTUFBTTthQUNmO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7Ozs7SUFFTSw0Q0FBb0I7Ozs7Ozs7SUFBM0IsVUFBNEIsRUFBVSxFQUFFLE9BQWdCLEVBQUUsS0FBa0IsRUFBRSxNQUFrQjtRQUF0QyxzQkFBQSxFQUFB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QUVaLCtCQUFxQzs7Ozs7SUFDckMsNkJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge0NhdGVnb3J5fSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge1BsYXlsaXN0fSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge1BhZ2luZ30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtGZWF0dXJlZFBsYXlsaXN0c30gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtBbGJ1bX0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHtBbGJ1bVNpbXBsaWZpZWR9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7QXBpQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQge1BsYXlsaXN0U2ltcGxpZmllZH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmNsYXNzIFBsYXlsaXN0TGlzdCB7XHJcbiAgcGxheWxpc3RzOiBQYWdpbmc8UGxheWxpc3RTaW1wbGlmaWVkPjtcclxufVxyXG5cclxuY2xhc3MgQ2F0ZWdvcnlMaXN0IHtcclxuICBjYXRlZ29yaWVzOiBQYWdpbmc8Q2F0ZWdvcnk+O1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCcm93c2VTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb25maWc6IEFwaUNvbmZpZyxcclxuICAgICAgICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q2F0ZWdvcnkoaWQ6IHN0cmluZywgY291bnRyeT86IHN0cmluZywgbG9jYWxlPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxDYXRlZ29yeT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Q2F0ZWdvcnk+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyAnL3YxL2Jyb3dzZS9jYXRlZ29yaWVzLycgKyBpZCwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBjb3VudHJ5OiBjb3VudHJ5LFxyXG4gICAgICAgIGxvY2FsZTogbG9jYWxlXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldENhdGVnb3J5UGxheWxpc3RzKGlkOiBzdHJpbmcsIGNvdW50cnk/OiBzdHJpbmcsIGxpbWl0OiBudW1iZXIgPSAyMCwgb2Zmc2V0OiBudW1iZXIgPSAwKTogT2JzZXJ2YWJsZTxQYWdpbmc8UGxheWxpc3RTaW1wbGlmaWVkPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UGxheWxpc3RMaXN0Pih0aGlzLmNvbmZpZy5iYXNlVXJsICsgJy92MS9icm93c2UvY2F0ZWdvcmllcy8nICsgaWQgKyAnL3BsYXlsaXN0cycsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgY291bnRyeTogY291bnRyeSxcclxuICAgICAgICBsaW1pdDogbGltaXQudG9TdHJpbmcoKSxcclxuICAgICAgICBvZmZzZXQ6IG9mZnNldC50b1N0cmluZygpXHJcbiAgICAgIH1cclxuICAgIH0pLnBpcGUobWFwKChyZXM6IFBsYXlsaXN0TGlzdCkgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXMucGxheWxpc3RzO1xyXG4gICAgICB9KSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q2F0ZWdvcmllcyhjb3VudHJ5Pzogc3RyaW5nLCBsb2NhbGU/OiBzdHJpbmcsIGxpbWl0OiBudW1iZXIgPSAyMCwgb2Zmc2V0OiBudW1iZXIgPSAwKTogT2JzZXJ2YWJsZTxQYWdpbmc8Q2F0ZWdvcnk+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxDYXRlZ29yeUxpc3Q+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyAnL3YxL2Jyb3dzZS9jYXRlZ29yaWVzJywge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBjb3VudHJ5OiBjb3VudHJ5LFxyXG4gICAgICAgIGxvY2FsZTogbG9jYWxlLFxyXG4gICAgICAgIGxpbWl0OiBsaW1pdC50b1N0cmluZygpLFxyXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LnRvU3RyaW5nKClcclxuICAgICAgfVxyXG4gICAgfSkucGlwZShtYXAoKGxpc3Q6IENhdGVnb3J5TGlzdCkgPT4ge1xyXG4gICAgICByZXR1cm4gbGlzdC5jYXRlZ29yaWVzO1xyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEZlYXR1cmVkUGxheWxpc3RzKFxyXG4gICAgY291bnRyeT86IHN0cmluZyxcclxuICAgIGxvY2FsZT86IHN0cmluZyxcclxuICAgIHRpbWVzdGFtcDogRGF0ZSA9IG5ldyBEYXRlKCksXHJcbiAgICBsaW1pdDogbnVtYmVyID0gMjAsIG9mZnNldDogbnVtYmVyID0gMClcclxuICAgIDogT2JzZXJ2YWJsZTxGZWF0dXJlZFBsYXlsaXN0cz4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxGZWF0dXJlZFBsYXlsaXN0cz4odGhpcy5jb25maWcuYmFzZVVybCArICcvdjEvYnJvd3NlL2ZlYXR1cmVkLXBsYXlsaXN0cycsIHtcclxuICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgIGNvdW50cnksXHJcbiAgICAgICAgICBsb2NhbGUsXHJcbiAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcC50b0lTT1N0cmluZygpLFxyXG4gICAgICAgICAgbGltaXQ6IGxpbWl0LnRvU3RyaW5nKCksXHJcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldC50b1N0cmluZygpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXROZXdSZWxlYXNlcyhjb3VudHJ5Pzogc3RyaW5nLCBsaW1pdDogbnVtYmVyID0gMjAsIG9mZnNldDogbnVtYmVyID0gMCk6IE9ic2VydmFibGU8UGFnaW5nPEFsYnVtU2ltcGxpZmllZD4+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PHsgYWxidW1zOiBQYWdpbmc8QWxidW1TaW1wbGlmaWVkPiB9Pih0aGlzLmNvbmZpZy5iYXNlVXJsICsgJy92MS9icm93c2UvbmV3LXJlbGVhc2VzJywge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBjb3VudHJ5LFxyXG4gICAgICAgIGxpbWl0OiBsaW1pdC50b1N0cmluZygpLFxyXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LnRvU3RyaW5nKClcclxuICAgICAgfVxyXG4gICAgfSkucGlwZShtYXAoKHthbGJ1bXN9KSA9PiB7XHJcbiAgICAgIHJldHVybiBhbGJ1bXM7XHJcbiAgICB9KSk7XHJcbiAgfVxyXG5cclxuICAvLyBSZWNvbW1lbmRhdGlvbnMgd2lsbCBmb2xsb3cgaW4gYSBmdXR1cmUgcmVsZWFzZVxyXG59XHJcbiJdfQ==