/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map, take } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var DeviceList = /** @class */ (function () {
    function DeviceList() {
    }
    return DeviceList;
}());
if (false) {
    /** @type {?} */
    DeviceList.prototype.devices;
}
var PlayerService = /** @class */ (function () {
    function PlayerService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.nextTrack = /**
     * @param {?=} deviceId
     * @return {?}
     */
    function (deviceId) {
        return this.http.post(this.config.baseUrl + "/v1/me/player/next", {}, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.previousTrack = /**
     * @param {?=} deviceId
     * @return {?}
     */
    function (deviceId) {
        return this.http.post(this.config.baseUrl + "/v1/me/player/previous", {}, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?} positionMs
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.seekToPosition = /**
     * @param {?} positionMs
     * @param {?=} deviceId
     * @return {?}
     */
    function (positionMs, deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/seek", {}, {
            params: {
                position_ms: positionMs.toString(),
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @return {?}
     */
    PlayerService.prototype.getAvailableDevices = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.config.baseUrl + "/v1/me/player/devices").pipe(map(function (list) { return list.devices; }));
    };
    /**
     * @param {?} shuffle
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.toggleShuffle = /**
     * @param {?} shuffle
     * @param {?=} deviceId
     * @return {?}
     */
    function (shuffle, deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/shuffle", {}, {
            params: {
                state: shuffle.toString(),
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     *
     * @param deviceIds Although an array is accepted, only a single deviceId is currently supported
     * @param forcePlay
     */
    /**
     *
     * @param {?} deviceIds Although an array is accepted, only a single deviceId is currently supported
     * @param {?=} forcePlay
     * @return {?}
     */
    PlayerService.prototype.transferPlayback = /**
     *
     * @param {?} deviceIds Although an array is accepted, only a single deviceId is currently supported
     * @param {?=} forcePlay
     * @return {?}
     */
    function (deviceIds, forcePlay) {
        if (forcePlay === void 0) { forcePlay = false; }
        return this.http.put(this.config.baseUrl + "/v1/me/player", {
            device_ids: deviceIds.join(','),
            play: forcePlay
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} limit
     * @param {?=} before
     * @param {?=} after
     * @return {?}
     */
    PlayerService.prototype.getRecentlyPlayedTracks = /**
     * @param {?=} limit
     * @param {?=} before
     * @param {?=} after
     * @return {?}
     */
    function (limit, before, after) {
        if (limit === void 0) { limit = 20; }
        if (after === void 0) { after = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/player/recently-played", {
            params: {
                limit: limit.toString(),
                before: (before ? before.toString() : undefined),
                after: after.toString(),
            }
        });
    };
    /**
     * @param {?=} deviceId
     * @param {?=} context
     * @param {?=} uris
     * @param {?=} offset
     * @param {?=} positionMs
     * @return {?}
     */
    PlayerService.prototype.startPlayback = /**
     * @param {?=} deviceId
     * @param {?=} context
     * @param {?=} uris
     * @param {?=} offset
     * @param {?=} positionMs
     * @return {?}
     */
    function (deviceId, context, uris, offset, positionMs) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/play", {
            context_uri: context,
            uris: uris,
            offset: offset,
            position_ms: positionMs
        }, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.pausePlayback = /**
     * @param {?=} deviceId
     * @return {?}
     */
    function (deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/pause", {}, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?} mode
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.toggleRepeatMode = /**
     * @param {?} mode
     * @param {?=} deviceId
     * @return {?}
     */
    function (mode, deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/repeat", {}, {
            params: {
                state: mode,
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} market
     * @return {?}
     */
    PlayerService.prototype.getPlayback = /**
     * @param {?=} market
     * @return {?}
     */
    function (market) {
        return this.http.get(this.config.baseUrl + "/v1/me/player", {
            params: {
                market: market
            }
        });
    };
    /**
     * @param {?=} market
     * @return {?}
     */
    PlayerService.prototype.getCurrentlyPlayingTrack = /**
     * @param {?=} market
     * @return {?}
     */
    function (market) {
        return this.http.get(this.config.baseUrl + "/v1/me/player/currently-playing", {
            params: {
                market: market
            }
        });
    };
    /**
     * @param {?} volume
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.setPlaybackVolume = /**
     * @param {?} volume
     * @param {?=} deviceId
     * @return {?}
     */
    function (volume, deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/volume", {}, {
            params: {
                volume_percent: volume.toString(),
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    PlayerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PlayerService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PlayerService.ngInjectableDef = i0.defineInjectable({ factory: function PlayerService_Factory() { return new PlayerService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: PlayerService, providedIn: "root" });
    return PlayerService;
}());
export { PlayerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PlayerService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    PlayerService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,