/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { ApiConfig } from '../models';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var LibraryService = /** @class */ (function () {
    function LibraryService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.areSavedAlbums = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + "/v1/me/albums/contains", {
            params: {
                ids: ids.join(',')
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.areSavedTracks = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + "/v1/me/tracks/contains", {
            params: {
                ids: ids.join(',')
            }
        });
    };
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    LibraryService.prototype.getSavedAlbums = /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    function (limit, offset, market) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/albums", {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    };
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    LibraryService.prototype.getSavedTracks = /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    function (limit, offset, market) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/tracks", {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.saveAlbums = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + "/v1/me/albums", {}, {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.removeAlbums = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + "/v1/me/albums", {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.saveTracks = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + "/v1/me/tracks", {}, {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.removeTracks = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + "/v1/me/tracks", {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    LibraryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LibraryService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ LibraryService.ngInjectableDef = i0.defineInjectable({ factory: function LibraryService_Factory() { return new LibraryService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: LibraryService, providedIn: "root" });
    return LibraryService;
}());
export { LibraryService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LibraryService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    LibraryService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,