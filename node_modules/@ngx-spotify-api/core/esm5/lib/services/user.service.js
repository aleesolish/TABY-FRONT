/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var UserService = /** @class */ (function () {
    function UserService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    UserService.prototype.getUser = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + ("/v1/users/" + id));
    };
    /**
     * @return {?}
     */
    UserService.prototype.getCurrentUser = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.config.baseUrl + "/v1/me");
    };
    UserService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UserService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ UserService.ngInjectableDef = i0.defineInjectable({ factory: function UserService_Factory() { return new UserService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: UserService, providedIn: "root" });
    return UserService;
}());
export { UserService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UserService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    UserService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1zcG90aWZ5LWFwaS9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3VzZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBSWhELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxXQUFXLENBQUM7Ozs7QUFFcEM7SUFLRSxxQkFBZ0MsTUFBaUIsRUFDN0IsSUFBZ0I7UUFESixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQzdCLFNBQUksR0FBSixJQUFJLENBQVk7SUFBSSxDQUFDOzs7OztJQUV6Qyw2QkFBTzs7OztJQUFQLFVBQVEsRUFBVTtRQUNoQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFHLGVBQWEsRUFBSSxDQUFBLENBQUMsQ0FBQztJQUM1RSxDQUFDOzs7O0lBRUQsb0NBQWM7OztJQUFkO1FBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBYyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQztJQUNwRSxDQUFDOztnQkFkRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQUpPLFNBQVMsdUJBT0YsUUFBUTtnQkFYZixVQUFVOzs7c0JBRGxCO0NBc0JDLEFBZkQsSUFlQztTQVpZLFdBQVc7Ozs7OztJQUVWLDZCQUFxQzs7Ozs7SUFDckMsMkJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1VzZXJQdWJsaWN9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQge1VzZXJQcml2YXRlfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHtBcGlDb25maWd9IGZyb20gJy4uL21vZGVscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGNvbmZpZzogQXBpQ29uZmlnLFxuICAgICAgICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIGdldFVzZXIoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8VXNlclB1YmxpYz4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFVzZXJQdWJsaWM+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL3VzZXJzLyR7aWR9YCk7XG4gIH1cblxuICBnZXRDdXJyZW50VXNlcigpOiBPYnNlcnZhYmxlPFVzZXJQcml2YXRlPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8VXNlclByaXZhdGU+KHRoaXMuY29uZmlnLmJhc2VVcmwgKyBgL3YxL21lYCk7XG4gIH1cbn1cbiJdfQ==