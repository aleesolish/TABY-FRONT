/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ApiConfig } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "../models/configs/api.config";
import * as i2 from "@angular/common/http";
var Snapshot = /** @class */ (function () {
    function Snapshot() {
    }
    return Snapshot;
}());
if (false) {
    /** @type {?} */
    Snapshot.prototype.snapshotId;
}
var PlaylistService = /** @class */ (function () {
    function PlaylistService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?} uris
     * @param {?} position
     * @return {?}
     */
    PlaylistService.prototype.addTracksToPlaylist = /**
     * @param {?} id
     * @param {?} uris
     * @param {?} position
     * @return {?}
     */
    function (id, uris, position) {
        if (typeof uris !== typeof [] || uris.length < 1 || uris.length > 100) {
            return of(null);
        }
        return this.http.post(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            uris: uris,
            position: position
        }).pipe(map(function (_a) {
            var snapshotId = _a.snapshotId;
            return snapshotId;
        }));
    };
    /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    PlaylistService.prototype.removeTracksFromPlaylist = /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    function (id, uris) {
        if (typeof uris !== typeof [] || uris.length < 1 || uris.length > 100) {
            return of(null);
        }
        return this.http.request('DELETE', this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            body: {
                tracks: uris.map(function (uri) {
                    return { uri: uri };
                })
            }
        }).pipe(map(function (_a) {
            var snapshotId = _a.snapshotId;
            return snapshotId;
        }));
    };
    /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    PlaylistService.prototype.getPlaylist = /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    function (id, market) {
        return this.http.get(this.config.baseUrl + ("/v1/playlists/" + id), {
            params: {
                market: market || ''
            }
        });
    };
    /**
     * @param {?} id
     * @param {?} market
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    PlaylistService.prototype.getPlaylistTracks = /**
     * @param {?} id
     * @param {?} market
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (id, market, limit, offset) {
        if (limit === void 0) { limit = 100; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PlaylistService.prototype.getPlaylistCover = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + ("/v1/playlists/" + id + "/images"));
    };
    /**
     *
     * @param id id of playlist
     * @param image base64 encoded jpeg (max. 256KB)
     */
    /**
     *
     * @param {?} id id of playlist
     * @param {?} image base64 encoded jpeg (max. 256KB)
     * @return {?}
     */
    PlaylistService.prototype.uploadPlaylistCover = /**
     *
     * @param {?} id id of playlist
     * @param {?} image base64 encoded jpeg (max. 256KB)
     * @return {?}
     */
    function (id, image) {
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/images"), image, {
            headers: {
                'Content-Type': 'image/jpeg'
            }
        }).pipe(map(function (res) {
            return true;
        }));
    };
    /**
     *
     * @param limit min=1, default=20, max=50
     * @param offset min=0, default=0, max=100000
     */
    /**
     *
     * @param {?=} limit min=1, default=20, max=50
     * @param {?=} offset min=0, default=0, max=100000
     * @return {?}
     */
    PlaylistService.prototype.getOwnPlaylists = /**
     *
     * @param {?=} limit min=1, default=20, max=50
     * @param {?=} offset min=0, default=0, max=100000
     * @return {?}
     */
    function (limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/playlists", {
            params: {
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    };
    /**
     * @param {?} id
     * @param {?=} name
     * @param {?=} isPublic
     * @param {?=} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    PlaylistService.prototype.updateDetails = /**
     * @param {?} id
     * @param {?=} name
     * @param {?=} isPublic
     * @param {?=} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    function (id, name, isPublic, isCollaborative, description) {
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id), {
            name: name,
            public: isPublic,
            collaborative: isCollaborative,
            description: description
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        }).pipe(map(function (res) {
            return true;
        }));
    };
    /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    PlaylistService.prototype.getUsersPlaylists = /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (id, limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + ("/v1/users/" + id + "/playlists"), {
            params: {
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    };
    /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    PlaylistService.prototype.replacePlaylistTracks = /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    function (id, uris) {
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            uris: uris
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        }).pipe(map(function (res) {
            return true;
        }));
    };
    /**
     * @param {?} userid
     * @param {?} name
     * @param {?} isPublic
     * @param {?} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    PlaylistService.prototype.createPlaylists = /**
     * @param {?} userid
     * @param {?} name
     * @param {?} isPublic
     * @param {?} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    function (userid, name, isPublic, isCollaborative, description) {
        if (description === void 0) { description = ''; }
        return this.http.post(this.config.baseUrl + ("/v1/users/" + userid + "/playlists"), {
            name: name,
            public: isPublic,
            collaborative: isCollaborative,
            description: description
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
    };
    /**
     * @param {?} id
     * @param {?} rangeStart
     * @param {?} rangeLength
     * @param {?} insertBefore
     * @param {?=} snapshot
     * @return {?}
     */
    PlaylistService.prototype.reorderPlaylistTracks = /**
     * @param {?} id
     * @param {?} rangeStart
     * @param {?} rangeLength
     * @param {?} insertBefore
     * @param {?=} snapshot
     * @return {?}
     */
    function (id, rangeStart, rangeLength, insertBefore, snapshot) {
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            range_start: rangeStart,
            insert_before: insertBefore,
            range_length: rangeLength,
            snapshot_id: snapshot
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        }).pipe(map(function (s) { return s.snapshotId; }));
    };
    PlaylistService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PlaylistService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PlaylistService.ngInjectableDef = i0.defineInjectable({ factory: function PlaylistService_Factory() { return new PlaylistService(i0.inject(i1.ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: PlaylistService, providedIn: "root" });
    return PlaylistService;
}());
export { PlaylistService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PlaylistService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    PlaylistService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,