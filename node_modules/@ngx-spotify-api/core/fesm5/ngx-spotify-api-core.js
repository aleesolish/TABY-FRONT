import { of } from 'rxjs';
import { flatMap, map, take } from 'rxjs/operators';
import { __assign, __extends } from 'tslib';
import { Injectable, Optional, NgModule, defineInjectable, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpParams, HTTP_INTERCEPTORS, HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApiConfig = /** @class */ (function () {
    function ApiConfig() {
        this.baseUrl = 'https://api.spotify.com';
    }
    return ApiConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AuthorizationConfig = /** @class */ (function () {
    function AuthorizationConfig() {
        /**
         * \@description This used to prefix the access- and refreshToken inside the local storage.
         */
        this.storagePrefix = 'ngx-spotify-api-';
        /**
         * \@description This is an array of all scopes you need your application to access to. Default all scopes will be requested
         */
        this.scopes = [
            'user-top-read', 'user-read-recently-played',
            'user-read-email', 'user-read-birthdate', 'user-read-private',
            'playlist-read-collaborative', 'playlist-modify-public', 'playlist-read-private', 'playlist-modify-private',
            'user-library-modify', 'user-library-read',
            'user-follow-modify', 'user-follow-read',
            'streaming', 'app-remote-control',
            'user-read-playback-state', 'user-modify-playback-state', 'user-read-currently-playing'
        ];
    }
    return AuthorizationConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SpotifyApiConfig = /** @class */ (function () {
    function SpotifyApiConfig() {
    }
    return SpotifyApiConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AuthInterceptor = /** @class */ (function () {
    function AuthInterceptor(apiConfig, authConfig) {
        this.apiConfig = apiConfig;
        this.authConfig = authConfig;
    }
    /**
     * @private
     * @param {?} req
     * @return {?}
     */
    AuthInterceptor.prototype.attachAuthorizationHeader = /**
     * @private
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this.authConfig.accessToken().pipe(map(function (token) {
            return req.clone({
                headers: req.headers.set('Authorization', 'Bearer ' + token)
            });
        }));
    };
    /**
     * @param {?} origReq
     * @param {?} next
     * @return {?}
     */
    AuthInterceptor.prototype.intercept = /**
     * @param {?} origReq
     * @param {?} next
     * @return {?}
     */
    function (origReq, next) {
        return this.attachAuthorizationHeader(origReq).pipe(flatMap(function (req) {
            return next.handle(req);
        }));
    };
    AuthInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthInterceptor.ctorParameters = function () { return [
        { type: ApiConfig },
        { type: AuthorizationConfig }
    ]; };
    return AuthInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CorsInterceptor = /** @class */ (function () {
    function CorsInterceptor(apiConfig) {
        this.apiConfig = apiConfig;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    CorsInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        /** @type {?} */
        var headers = req.headers;
        if (req.url.indexOf(this.apiConfig.baseUrl) > -1) {
            headers = headers.set('Accept', 'application/json');
            headers = headers.set('Content-Type', 'application/json');
        }
        else if (req.url.indexOf('authorize')) ;
        /** @type {?} */
        var newReq = req.clone({
            headers: headers
        });
        return next.handle(newReq);
    };
    CorsInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CorsInterceptor.ctorParameters = function () { return [
        { type: ApiConfig }
    ]; };
    return CorsInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RemoveNullParamsInterceptor = /** @class */ (function () {
    function RemoveNullParamsInterceptor(apiConfig) {
        this.apiConfig = apiConfig;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    RemoveNullParamsInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        /** @type {?} */
        var params = new HttpParams();
        if (req.url.indexOf(this.apiConfig.baseUrl) > -1) {
            params.keys().forEach(function (key) {
                /** @type {?} */
                var param = params.get(key);
                if (param != null && param !== 'null' && param !== 'undefined' && param !== '') {
                    params.set(key, param);
                }
            });
        }
        /** @type {?} */
        var newReq = req.clone({
            'params': params
        });
        return next.handle(newReq);
    };
    RemoveNullParamsInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RemoveNullParamsInterceptor.ctorParameters = function () { return [
        { type: ApiConfig }
    ]; };
    return RemoveNullParamsInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UnderscoreToCamelcaseInterceptor = /** @class */ (function () {
    function UnderscoreToCamelcaseInterceptor(apiConfig, authConfig) {
        this.apiConfig = apiConfig;
        this.authConfig = authConfig;
    }
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    UnderscoreToCamelcaseInterceptor.prototype.transformObjectKeysToCamelCase = /**
     * @private
     * @param {?} object
     * @return {?}
     */
    function (object) {
        var _this = this;
        if (object == null || object === {}) {
            return object;
        }
        /** @type {?} */
        var ret = {};
        Object.keys(object).forEach(function (key) {
            /** @type {?} */
            var newKey = key.replace(/[_]([^_])?/g, function (v) {
                return v.replace('_', '').toUpperCase();
            });
            if (object[key] instanceof Array) {
                ret[newKey] = object[key].map(function (value) {
                    return _this.transformObjectKeysToCamelCase(value);
                });
            }
            else if (object[key] instanceof Object) {
                ret[newKey] = _this.transformObjectKeysToCamelCase(object[key]);
            }
            else {
                ret[newKey] = object[key];
            }
        });
        return ret;
    };
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    UnderscoreToCamelcaseInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        return next.handle(req).pipe(map(function (res) {
            if (req && req.url && req.url.includes(_this.apiConfig.baseUrl) && res.body) {
                return res.clone({
                    body: _this.transformObjectKeysToCamelCase(res.body)
                });
            }
            return res;
        }));
    };
    UnderscoreToCamelcaseInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UnderscoreToCamelcaseInterceptor.ctorParameters = function () { return [
        { type: ApiConfig },
        { type: AuthorizationConfig }
    ]; };
    return UnderscoreToCamelcaseInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Http interceptor providers in outside-in order
 * @type {?}
 */
var httpInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: CorsInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: RemoveNullParamsInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: UnderscoreToCamelcaseInterceptor, multi: true }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Album = /** @class */ (function () {
    function Album() {
    }
    return Album;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AlbumSimplified = /** @class */ (function () {
    function AlbumSimplified() {
    }
    return AlbumSimplified;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Artist = /** @class */ (function () {
    function Artist() {
    }
    return Artist;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ArtistSimplified = /** @class */ (function () {
    function ArtistSimplified() {
    }
    return ArtistSimplified;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AudioAnalysis = /** @class */ (function () {
    function AudioAnalysis() {
    }
    return AudioAnalysis;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AudioFeatures = /** @class */ (function () {
    function AudioFeatures() {
    }
    return AudioFeatures;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Category = /** @class */ (function () {
    function Category() {
    }
    return Category;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Context = /** @class */ (function () {
    function Context() {
    }
    return Context;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Copyright = /** @class */ (function () {
    function Copyright() {
    }
    return Copyright;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Cursor = /** @class */ (function () {
    function Cursor() {
    }
    return Cursor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template C
 */
var  /**
 * @template C
 */
CursorPaging = /** @class */ (function () {
    function CursorPaging() {
    }
    return CursorPaging;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Device = /** @class */ (function () {
    function Device() {
    }
    return Device;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Error = /** @class */ (function () {
    function Error() {
    }
    return Error;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExternalId = /** @class */ (function () {
    function ExternalId() {
    }
    return ExternalId;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExternalUrl = /** @class */ (function () {
    function ExternalUrl() {
    }
    return ExternalUrl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FeaturedPlaylists = /** @class */ (function () {
    function FeaturedPlaylists() {
    }
    return FeaturedPlaylists;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Followers = /** @class */ (function () {
    function Followers() {
    }
    return Followers;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Image = /** @class */ (function () {
    function Image() {
    }
    return Image;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template C
 */
var  /**
 * @template C
 */
Paging = /** @class */ (function () {
    function Paging() {
    }
    return Paging;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlayHistory = /** @class */ (function () {
    function PlayHistory() {
    }
    return PlayHistory;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Playback = /** @class */ (function () {
    function Playback() {
    }
    return Playback;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlayerError = /** @class */ (function (_super) {
    __extends(PlayerError, _super);
    function PlayerError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PlayerError;
}(Error));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Playlist = /** @class */ (function () {
    function Playlist() {
    }
    return Playlist;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlaylistSimplified = /** @class */ (function () {
    function PlaylistSimplified() {
    }
    return PlaylistSimplified;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlaylistTrack = /** @class */ (function () {
    function PlaylistTrack() {
    }
    return PlaylistTrack;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Recommendations = /** @class */ (function () {
    function Recommendations() {
    }
    return Recommendations;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RecommendationsSeed = /** @class */ (function () {
    function RecommendationsSeed() {
    }
    return RecommendationsSeed;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Restriction = /** @class */ (function () {
    function Restriction() {
    }
    return Restriction;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SavedAlbum = /** @class */ (function () {
    function SavedAlbum() {
    }
    return SavedAlbum;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SavedTrack = /** @class */ (function () {
    function SavedTrack() {
    }
    return SavedTrack;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SearchResult = /** @class */ (function () {
    function SearchResult() {
    }
    return SearchResult;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Track = /** @class */ (function () {
    function Track() {
    }
    return Track;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TrackCurrent = /** @class */ (function () {
    function TrackCurrent() {
    }
    return TrackCurrent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TrackLink = /** @class */ (function () {
    function TrackLink() {
    }
    return TrackLink;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TrackSimplified = /** @class */ (function () {
    function TrackSimplified() {
    }
    return TrackSimplified;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UserPrivate = /** @class */ (function () {
    function UserPrivate() {
    }
    return UserPrivate;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UserPublic = /** @class */ (function () {
    function UserPublic() {
    }
    return UserPublic;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AlbumService = /** @class */ (function () {
    function AlbumService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    AlbumService.prototype.getAlbum = /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    function (id, market) {
        return this.http.get(this.config.baseUrl + '/v1/albums/' + id, {
            params: {
                market: market
            }
        });
    };
    /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    AlbumService.prototype.getAlbumTracks = /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    function (id, limit, offset, market) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/albums/' + id + '/tracks', {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    };
    /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    AlbumService.prototype.getAlbums = /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    function (ids, market) {
        if (ids == null || ids.length < 1) {
            return of([]);
        }
        else if (ids.length > 20) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/albums', {
            params: {
                ids: ids.join(','),
                market: market
            }
        }).pipe(map(function (res) {
            return res.albums;
        }));
    };
    AlbumService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AlbumService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ AlbumService.ngInjectableDef = defineInjectable({ factory: function AlbumService_Factory() { return new AlbumService(inject(ApiConfig, 8), inject(HttpClient)); }, token: AlbumService, providedIn: "root" });
    return AlbumService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ArtistService = /** @class */ (function () {
    function ArtistService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    ArtistService.prototype.getArtist = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + '/v1/artists/' + id, {
            params: {}
        });
    };
    /**
     * @param {?} id
     * @param {?=} includeGroups
     * @param {?=} market
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    ArtistService.prototype.getArtistsAlbums = /**
     * @param {?} id
     * @param {?=} includeGroups
     * @param {?=} market
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (id, includeGroups, market, limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/artists/' + id + '/albums', {
            params: {
                include_groups: includeGroups ? includeGroups.join(',') : null,
                market: market,
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    };
    /**
     * @param {?} id
     * @param {?} market
     * @return {?}
     */
    ArtistService.prototype.getArtistsTopTracks = /**
     * @param {?} id
     * @param {?} market
     * @return {?}
     */
    function (id, market) {
        return this.http.get(this.config.baseUrl + '/v1/artists/' + id + '/top-tracks', {
            params: {
                market: market
            }
        }).pipe(map(function (res) {
            return res.tracks;
        }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ArtistService.prototype.getArtistsRelatedArtists = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + '/v1/artists/' + id + '/related-artists', {
            params: {}
        }).pipe(map(function (res) {
            return res.artists;
        }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    ArtistService.prototype.getArtists = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids == null || ids.length < 1) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/artists/', {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function (res) {
            return res.artists;
        }));
    };
    ArtistService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ArtistService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ ArtistService.ngInjectableDef = defineInjectable({ factory: function ArtistService_Factory() { return new ArtistService(inject(ApiConfig, 8), inject(HttpClient)); }, token: ArtistService, providedIn: "root" });
    return ArtistService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BrowseService = /** @class */ (function () {
    function BrowseService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} locale
     * @return {?}
     */
    BrowseService.prototype.getCategory = /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} locale
     * @return {?}
     */
    function (id, country, locale) {
        return this.http.get(this.config.baseUrl + '/v1/browse/categories/' + id, {
            params: {
                country: country,
                locale: locale
            }
        });
    };
    /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    BrowseService.prototype.getCategoryPlaylists = /**
     * @param {?} id
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (id, country, limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/browse/categories/' + id + '/playlists', {
            params: {
                country: country,
                limit: limit.toString(),
                offset: offset.toString()
            }
        }).pipe(map(function (res) {
            return res.playlists;
        }));
    };
    /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    BrowseService.prototype.getCategories = /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (country, locale, limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/browse/categories', {
            params: {
                country: country,
                locale: locale,
                limit: limit.toString(),
                offset: offset.toString()
            }
        }).pipe(map(function (list) {
            return list.categories;
        }));
    };
    /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} timestamp
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    BrowseService.prototype.getFeaturedPlaylists = /**
     * @param {?=} country
     * @param {?=} locale
     * @param {?=} timestamp
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (country, locale, timestamp, limit, offset) {
        if (timestamp === void 0) { timestamp = new Date(); }
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/browse/featured-playlists', {
            params: {
                country: country,
                locale: locale,
                timestamp: timestamp.toISOString(),
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    };
    /**
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    BrowseService.prototype.getNewReleases = /**
     * @param {?=} country
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (country, limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + '/v1/browse/new-releases', {
            params: {
                country: country,
                limit: limit.toString(),
                offset: offset.toString()
            }
        }).pipe(map(function (_a) {
            var albums = _a.albums;
            return albums;
        }));
    };
    BrowseService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    BrowseService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ BrowseService.ngInjectableDef = defineInjectable({ factory: function BrowseService_Factory() { return new BrowseService(inject(ApiConfig, 8), inject(HttpClient)); }, token: BrowseService, providedIn: "root" });
    return BrowseService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FollowService = /** @class */ (function () {
    function FollowService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.isFollowingArtists = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/me/following/contains', {
            params: {
                type: 'artist',
                ids: ids.join(',')
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.isFollowingUsers = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + '/v1/me/following/contains', {
            params: {
                type: 'user',
                ids: ids.join(',')
            }
        });
    };
    /**
     * @param {?} playlistId
     * @param {?} usersToCheck
     * @return {?}
     */
    FollowService.prototype.areFollowingPlaylist = /**
     * @param {?} playlistId
     * @param {?} usersToCheck
     * @return {?}
     */
    function (playlistId, usersToCheck) {
        if (usersToCheck === null || usersToCheck.length === 0) {
            return of([]);
        }
        else if (usersToCheck.length > 5) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + ("/v1/playlists/" + playlistId + "/followers/contains"), {
            params: {
                ids: usersToCheck.join(',')
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.followArtists = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + '/v1/me/following', {}, {
            params: {
                type: 'artist',
                ids: ids.join(',')
            }
        }).pipe(map(function () {
            return true;
        }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.followUsers = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + '/v1/me/following', {}, {
            params: {
                type: 'user',
                ids: ids.join(',')
            }
        }).pipe(map(function () {
            return true;
        }));
    };
    /**
     * @param {?} id
     * @param {?=} isPublic
     * @return {?}
     */
    FollowService.prototype.followPlaylist = /**
     * @param {?} id
     * @param {?=} isPublic
     * @return {?}
     */
    function (id, isPublic) {
        if (isPublic === void 0) { isPublic = false; }
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/followers"), {
            public: isPublic
        }).pipe(map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} limit
     * @param {?=} after
     * @return {?}
     */
    FollowService.prototype.getFollowedArtists = /**
     * @param {?=} limit
     * @param {?=} after
     * @return {?}
     */
    function (limit, after) {
        if (limit === void 0) { limit = 20; }
        return this.http.get(this.config.baseUrl + "/v1/me/following", {
            params: {
                type: 'artist',
                limit: limit.toString(),
                after: after
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.unfollowArtists = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + '/v1/me/following', {
            params: {
                type: 'artist',
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FollowService.prototype.unfollowUsers = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + '/v1/me/following', {
            params: {
                type: 'user',
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    FollowService.prototype.unfollowPlaylist = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.delete(this.config.baseUrl + ("/v1/playlists/" + id + "/followers")).pipe(map(function () { return true; }));
    };
    FollowService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FollowService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ FollowService.ngInjectableDef = defineInjectable({ factory: function FollowService_Factory() { return new FollowService(inject(ApiConfig, 8), inject(HttpClient)); }, token: FollowService, providedIn: "root" });
    return FollowService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LibraryService = /** @class */ (function () {
    function LibraryService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.areSavedAlbums = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + "/v1/me/albums/contains", {
            params: {
                ids: ids.join(',')
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.areSavedTracks = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + "/v1/me/tracks/contains", {
            params: {
                ids: ids.join(',')
            }
        });
    };
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    LibraryService.prototype.getSavedAlbums = /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    function (limit, offset, market) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/albums", {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    };
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    LibraryService.prototype.getSavedTracks = /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} market
     * @return {?}
     */
    function (limit, offset, market) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/tracks", {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.saveAlbums = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + "/v1/me/albums", {}, {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.removeAlbums = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + "/v1/me/albums", {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.saveTracks = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.put(this.config.baseUrl + "/v1/me/tracks", {}, {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    LibraryService.prototype.removeTracks = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === null || ids === undefined || ids.length === 0) {
            return of(false);
        }
        else if (ids.length > 50) {
            return of(false);
        }
        return this.http.delete(this.config.baseUrl + "/v1/me/tracks", {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function () { return true; }));
    };
    LibraryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LibraryService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ LibraryService.ngInjectableDef = defineInjectable({ factory: function LibraryService_Factory() { return new LibraryService(inject(ApiConfig, 8), inject(HttpClient)); }, token: LibraryService, providedIn: "root" });
    return LibraryService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PersonalizationService = /** @class */ (function () {
    function PersonalizationService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} timeRange
     * @return {?}
     */
    PersonalizationService.prototype.getTopArtists = /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} timeRange
     * @return {?}
     */
    function (limit, offset, timeRange) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/top/artists", {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                time_range: timeRange
            }
        });
    };
    /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} timeRange
     * @return {?}
     */
    PersonalizationService.prototype.getTopTracks = /**
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} timeRange
     * @return {?}
     */
    function (limit, offset, timeRange) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/top/tracks", {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                time_range: timeRange
            }
        });
    };
    PersonalizationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PersonalizationService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PersonalizationService.ngInjectableDef = defineInjectable({ factory: function PersonalizationService_Factory() { return new PersonalizationService(inject(ApiConfig, 8), inject(HttpClient)); }, token: PersonalizationService, providedIn: "root" });
    return PersonalizationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlayerService = /** @class */ (function () {
    function PlayerService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.nextTrack = /**
     * @param {?=} deviceId
     * @return {?}
     */
    function (deviceId) {
        return this.http.post(this.config.baseUrl + "/v1/me/player/next", {}, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.previousTrack = /**
     * @param {?=} deviceId
     * @return {?}
     */
    function (deviceId) {
        return this.http.post(this.config.baseUrl + "/v1/me/player/previous", {}, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?} positionMs
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.seekToPosition = /**
     * @param {?} positionMs
     * @param {?=} deviceId
     * @return {?}
     */
    function (positionMs, deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/seek", {}, {
            params: {
                position_ms: positionMs.toString(),
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @return {?}
     */
    PlayerService.prototype.getAvailableDevices = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.config.baseUrl + "/v1/me/player/devices").pipe(map(function (list) { return list.devices; }));
    };
    /**
     * @param {?} shuffle
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.toggleShuffle = /**
     * @param {?} shuffle
     * @param {?=} deviceId
     * @return {?}
     */
    function (shuffle, deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/shuffle", {}, {
            params: {
                state: shuffle.toString(),
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     *
     * @param deviceIds Although an array is accepted, only a single deviceId is currently supported
     * @param forcePlay
     */
    /**
     *
     * @param {?} deviceIds Although an array is accepted, only a single deviceId is currently supported
     * @param {?=} forcePlay
     * @return {?}
     */
    PlayerService.prototype.transferPlayback = /**
     *
     * @param {?} deviceIds Although an array is accepted, only a single deviceId is currently supported
     * @param {?=} forcePlay
     * @return {?}
     */
    function (deviceIds, forcePlay) {
        if (forcePlay === void 0) { forcePlay = false; }
        return this.http.put(this.config.baseUrl + "/v1/me/player", {
            device_ids: deviceIds.join(','),
            play: forcePlay
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} limit
     * @param {?=} before
     * @param {?=} after
     * @return {?}
     */
    PlayerService.prototype.getRecentlyPlayedTracks = /**
     * @param {?=} limit
     * @param {?=} before
     * @param {?=} after
     * @return {?}
     */
    function (limit, before, after) {
        if (limit === void 0) { limit = 20; }
        if (after === void 0) { after = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/player/recently-played", {
            params: {
                limit: limit.toString(),
                before: (before ? before.toString() : undefined),
                after: after.toString(),
            }
        });
    };
    /**
     * @param {?=} deviceId
     * @param {?=} context
     * @param {?=} uris
     * @param {?=} offset
     * @param {?=} positionMs
     * @return {?}
     */
    PlayerService.prototype.startPlayback = /**
     * @param {?=} deviceId
     * @param {?=} context
     * @param {?=} uris
     * @param {?=} offset
     * @param {?=} positionMs
     * @return {?}
     */
    function (deviceId, context, uris, offset, positionMs) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/play", {
            context_uri: context,
            uris: uris,
            offset: offset,
            position_ms: positionMs
        }, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.pausePlayback = /**
     * @param {?=} deviceId
     * @return {?}
     */
    function (deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/pause", {}, {
            params: {
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?} mode
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.toggleRepeatMode = /**
     * @param {?} mode
     * @param {?=} deviceId
     * @return {?}
     */
    function (mode, deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/repeat", {}, {
            params: {
                state: mode,
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    /**
     * @param {?=} market
     * @return {?}
     */
    PlayerService.prototype.getPlayback = /**
     * @param {?=} market
     * @return {?}
     */
    function (market) {
        return this.http.get(this.config.baseUrl + "/v1/me/player", {
            params: {
                market: market
            }
        });
    };
    /**
     * @param {?=} market
     * @return {?}
     */
    PlayerService.prototype.getCurrentlyPlayingTrack = /**
     * @param {?=} market
     * @return {?}
     */
    function (market) {
        return this.http.get(this.config.baseUrl + "/v1/me/player/currently-playing", {
            params: {
                market: market
            }
        });
    };
    /**
     * @param {?} volume
     * @param {?=} deviceId
     * @return {?}
     */
    PlayerService.prototype.setPlaybackVolume = /**
     * @param {?} volume
     * @param {?=} deviceId
     * @return {?}
     */
    function (volume, deviceId) {
        return this.http.put(this.config.baseUrl + "/v1/me/player/volume", {}, {
            params: {
                volume_percent: volume.toString(),
                device_id: deviceId
            }
        }).pipe(take(1), map(function () {
            return true;
        }));
    };
    PlayerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PlayerService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PlayerService.ngInjectableDef = defineInjectable({ factory: function PlayerService_Factory() { return new PlayerService(inject(ApiConfig, 8), inject(HttpClient)); }, token: PlayerService, providedIn: "root" });
    return PlayerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlaylistService = /** @class */ (function () {
    function PlaylistService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?} uris
     * @param {?} position
     * @return {?}
     */
    PlaylistService.prototype.addTracksToPlaylist = /**
     * @param {?} id
     * @param {?} uris
     * @param {?} position
     * @return {?}
     */
    function (id, uris, position) {
        if (typeof uris !== typeof [] || uris.length < 1 || uris.length > 100) {
            return of(null);
        }
        return this.http.post(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            uris: uris,
            position: position
        }).pipe(map(function (_a) {
            var snapshotId = _a.snapshotId;
            return snapshotId;
        }));
    };
    /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    PlaylistService.prototype.removeTracksFromPlaylist = /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    function (id, uris) {
        if (typeof uris !== typeof [] || uris.length < 1 || uris.length > 100) {
            return of(null);
        }
        return this.http.request('DELETE', this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            body: {
                tracks: uris.map(function (uri) {
                    return { uri: uri };
                })
            }
        }).pipe(map(function (_a) {
            var snapshotId = _a.snapshotId;
            return snapshotId;
        }));
    };
    /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    PlaylistService.prototype.getPlaylist = /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    function (id, market) {
        return this.http.get(this.config.baseUrl + ("/v1/playlists/" + id), {
            params: {
                market: market || ''
            }
        });
    };
    /**
     * @param {?} id
     * @param {?} market
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    PlaylistService.prototype.getPlaylistTracks = /**
     * @param {?} id
     * @param {?} market
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (id, market, limit, offset) {
        if (limit === void 0) { limit = 100; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            params: {
                limit: limit.toString(),
                offset: offset.toString(),
                market: market
            }
        });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PlaylistService.prototype.getPlaylistCover = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + ("/v1/playlists/" + id + "/images"));
    };
    /**
     *
     * @param id id of playlist
     * @param image base64 encoded jpeg (max. 256KB)
     */
    /**
     *
     * @param {?} id id of playlist
     * @param {?} image base64 encoded jpeg (max. 256KB)
     * @return {?}
     */
    PlaylistService.prototype.uploadPlaylistCover = /**
     *
     * @param {?} id id of playlist
     * @param {?} image base64 encoded jpeg (max. 256KB)
     * @return {?}
     */
    function (id, image) {
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/images"), image, {
            headers: {
                'Content-Type': 'image/jpeg'
            }
        }).pipe(map(function (res) {
            return true;
        }));
    };
    /**
     *
     * @param limit min=1, default=20, max=50
     * @param offset min=0, default=0, max=100000
     */
    /**
     *
     * @param {?=} limit min=1, default=20, max=50
     * @param {?=} offset min=0, default=0, max=100000
     * @return {?}
     */
    PlaylistService.prototype.getOwnPlaylists = /**
     *
     * @param {?=} limit min=1, default=20, max=50
     * @param {?=} offset min=0, default=0, max=100000
     * @return {?}
     */
    function (limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/me/playlists", {
            params: {
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    };
    /**
     * @param {?} id
     * @param {?=} name
     * @param {?=} isPublic
     * @param {?=} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    PlaylistService.prototype.updateDetails = /**
     * @param {?} id
     * @param {?=} name
     * @param {?=} isPublic
     * @param {?=} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    function (id, name, isPublic, isCollaborative, description) {
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id), {
            name: name,
            public: isPublic,
            collaborative: isCollaborative,
            description: description
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        }).pipe(map(function (res) {
            return true;
        }));
    };
    /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    PlaylistService.prototype.getUsersPlaylists = /**
     * @param {?} id
     * @param {?=} limit
     * @param {?=} offset
     * @return {?}
     */
    function (id, limit, offset) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + ("/v1/users/" + id + "/playlists"), {
            params: {
                limit: limit.toString(),
                offset: offset.toString()
            }
        });
    };
    /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    PlaylistService.prototype.replacePlaylistTracks = /**
     * @param {?} id
     * @param {?} uris
     * @return {?}
     */
    function (id, uris) {
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            uris: uris
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        }).pipe(map(function (res) {
            return true;
        }));
    };
    /**
     * @param {?} userid
     * @param {?} name
     * @param {?} isPublic
     * @param {?} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    PlaylistService.prototype.createPlaylists = /**
     * @param {?} userid
     * @param {?} name
     * @param {?} isPublic
     * @param {?} isCollaborative
     * @param {?=} description
     * @return {?}
     */
    function (userid, name, isPublic, isCollaborative, description) {
        if (description === void 0) { description = ''; }
        return this.http.post(this.config.baseUrl + ("/v1/users/" + userid + "/playlists"), {
            name: name,
            public: isPublic,
            collaborative: isCollaborative,
            description: description
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
    };
    /**
     * @param {?} id
     * @param {?} rangeStart
     * @param {?} rangeLength
     * @param {?} insertBefore
     * @param {?=} snapshot
     * @return {?}
     */
    PlaylistService.prototype.reorderPlaylistTracks = /**
     * @param {?} id
     * @param {?} rangeStart
     * @param {?} rangeLength
     * @param {?} insertBefore
     * @param {?=} snapshot
     * @return {?}
     */
    function (id, rangeStart, rangeLength, insertBefore, snapshot) {
        return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
            range_start: rangeStart,
            insert_before: insertBefore,
            range_length: rangeLength,
            snapshot_id: snapshot
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        }).pipe(map(function (s) { return s.snapshotId; }));
    };
    PlaylistService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PlaylistService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PlaylistService.ngInjectableDef = defineInjectable({ factory: function PlaylistService_Factory() { return new PlaylistService(inject(ApiConfig, 8), inject(HttpClient)); }, token: PlaylistService, providedIn: "root" });
    return PlaylistService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SearchService = /** @class */ (function () {
    function SearchService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} searchTerms
     * @param {?} types
     * @param {?=} market
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} includeExternal
     * @return {?}
     */
    SearchService.prototype.search = /**
     * @param {?} searchTerms
     * @param {?} types
     * @param {?=} market
     * @param {?=} limit
     * @param {?=} offset
     * @param {?=} includeExternal
     * @return {?}
     */
    function (searchTerms, types, market, limit, offset, includeExternal) {
        if (limit === void 0) { limit = 20; }
        if (offset === void 0) { offset = 0; }
        return this.http.get(this.config.baseUrl + "/v1/search", {
            params: {
                q: encodeURIComponent(searchTerms),
                type: types.join(','),
                market: market,
                limit: limit.toString(),
                offset: offset.toString(),
                include_external: includeExternal ? 'audio' : undefined
            }
        });
    };
    SearchService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SearchService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ SearchService.ngInjectableDef = defineInjectable({ factory: function SearchService_Factory() { return new SearchService(inject(ApiConfig, 8), inject(HttpClient)); }, token: SearchService, providedIn: "root" });
    return SearchService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TrackService = /** @class */ (function () {
    function TrackService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    TrackService.prototype.getTrack = /**
     * @param {?} id
     * @param {?=} market
     * @return {?}
     */
    function (id, market) {
        return this.http.get(this.config.baseUrl + ("/v1/tracks/" + id), {
            params: {
                market: market
            }
        });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TrackService.prototype.getAudioFeatures = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + ("/v1/audio-features/" + id));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TrackService.prototype.getAudioAnalysis = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + ("/v1/audio-analysis/" + id));
    };
    /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    TrackService.prototype.getTracks = /**
     * @param {?} ids
     * @param {?=} market
     * @return {?}
     */
    function (ids, market) {
        if (ids === undefined || ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + "/v1/tracks", {
            params: {
                ids: ids.join(','),
                market: market || ''
            }
        }).pipe(map(function (_a) {
            var tracks = _a.tracks;
            return tracks;
        }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    TrackService.prototype.getSeveralAudioFeatures = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (ids === undefined || ids === null || ids.length === 0) {
            return of([]);
        }
        else if (ids.length > 50) {
            return of(null);
        }
        return this.http.get(this.config.baseUrl + "/v1/audio-features", {
            params: {
                ids: ids.join(',')
            }
        }).pipe(map(function (_a) {
            var audioFeatures = _a.audioFeatures;
            return audioFeatures;
        }));
    };
    TrackService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TrackService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ TrackService.ngInjectableDef = defineInjectable({ factory: function TrackService_Factory() { return new TrackService(inject(ApiConfig, 8), inject(HttpClient)); }, token: TrackService, providedIn: "root" });
    return TrackService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UserService = /** @class */ (function () {
    function UserService(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    UserService.prototype.getUser = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.config.baseUrl + ("/v1/users/" + id));
    };
    /**
     * @return {?}
     */
    UserService.prototype.getCurrentUser = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.config.baseUrl + "/v1/me");
    };
    UserService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UserService.ctorParameters = function () { return [
        { type: ApiConfig, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ UserService.ngInjectableDef = defineInjectable({ factory: function UserService_Factory() { return new UserService(inject(ApiConfig, 8), inject(HttpClient)); }, token: UserService, providedIn: "root" });
    return UserService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxSpotifyApiModule = /** @class */ (function () {
    function NgxSpotifyApiModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NgxSpotifyApiModule.forRoot = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        config = {
            api: __assign({}, new ApiConfig(), config.api),
            authorization: __assign({}, new AuthorizationConfig(), config.authorization)
        };
        return {
            ngModule: NgxSpotifyApiModule,
            providers: [
                { provide: AuthorizationConfig, useValue: config.authorization },
                { provide: ApiConfig, useValue: config.api },
            ]
        };
    };
    NgxSpotifyApiModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        HttpClientModule,
                    ],
                    providers: [
                        ArtistService,
                        AlbumService,
                        BrowseService,
                        FollowService,
                        LibraryService,
                        PersonalizationService,
                        PlayerService,
                        PlaylistService,
                        SearchService,
                        TrackService,
                        UserService,
                        httpInterceptorProviders
                    ]
                },] }
    ];
    return NgxSpotifyApiModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { httpInterceptorProviders, AuthInterceptor, CorsInterceptor, RemoveNullParamsInterceptor, UnderscoreToCamelcaseInterceptor, Album, AlbumSimplified, Artist, ArtistSimplified, AudioAnalysis, AudioFeatures, Category, Context, Copyright, Cursor, CursorPaging, Device, Error, ExternalId, ExternalUrl, FeaturedPlaylists, Followers, Image, Paging, PlayHistory, Playback, PlayerError, Playlist, PlaylistSimplified, PlaylistTrack, Recommendations, RecommendationsSeed, Restriction, SavedAlbum, SavedTrack, SearchResult, Track, TrackCurrent, TrackLink, TrackSimplified, UserPrivate, UserPublic, ApiConfig, AuthorizationConfig, SpotifyApiConfig, AlbumService, ArtistService, BrowseService, FollowService, LibraryService, PersonalizationService, PlayerService, PlaylistService, SearchService, TrackService, UserService, NgxSpotifyApiModule };

//# sourceMappingURL=ngx-spotify-api-core.js.map