import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Device } from '../models';
import { CursorPaging } from '../models';
import { PlayHistory } from '../models';
import { Playback } from '../models';
import { TrackCurrent } from '../models';
import { ApiConfig } from '../models';
export declare class PlayerService {
    private config;
    private http;
    constructor(config: ApiConfig, http: HttpClient);
    nextTrack(deviceId?: string): Observable<boolean>;
    previousTrack(deviceId?: string): Observable<boolean>;
    seekToPosition(positionMs: number, deviceId?: string): Observable<boolean>;
    getAvailableDevices(): Observable<Device[]>;
    toggleShuffle(shuffle: boolean, deviceId?: string): Observable<boolean>;
    /**
     *
     * @param deviceIds Although an array is accepted, only a single deviceId is currently supported
     * @param forcePlay
     */
    transferPlayback(deviceIds: string[], forcePlay?: boolean): Observable<boolean>;
    getRecentlyPlayedTracks(limit?: number, before?: number, after?: number): Observable<CursorPaging<PlayHistory>>;
    startPlayback(deviceId?: string, context?: string, uris?: string[], offset?: any, positionMs?: number): Observable<boolean>;
    pausePlayback(deviceId?: string): Observable<boolean>;
    toggleRepeatMode(mode: 'track' | 'context' | 'off', deviceId?: string): Observable<boolean>;
    getPlayback(market?: string): Observable<Playback>;
    getCurrentlyPlayingTrack(market?: string): Observable<TrackCurrent>;
    setPlaybackVolume(volume: number, deviceId?: string): Observable<boolean>;
}
