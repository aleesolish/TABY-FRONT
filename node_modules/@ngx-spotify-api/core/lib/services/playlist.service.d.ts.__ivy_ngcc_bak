import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Playlist } from '../models';
import { Paging } from '../models';
import { PlaylistTrack } from '../models';
import { Image } from '../models';
import { ApiConfig } from '../models';
export declare class PlaylistService {
    private config;
    private http;
    constructor(config: ApiConfig, http: HttpClient);
    addTracksToPlaylist(id: string, uris: string[], position: number): Observable<string>;
    removeTracksFromPlaylist(id: string, uris: string[]): Observable<string>;
    getPlaylist(id: string, market?: string): Observable<Playlist>;
    getPlaylistTracks(id: string, market: string, limit?: number, offset?: number): Observable<Paging<PlaylistTrack>>;
    getPlaylistCover(id: string): Observable<Image[]>;
    /**
     *
     * @param id id of playlist
     * @param image base64 encoded jpeg (max. 256KB)
     */
    uploadPlaylistCover(id: string, image: string): Observable<boolean>;
    /**
     *
     * @param limit min=1, default=20, max=50
     * @param offset min=0, default=0, max=100000
     */
    getOwnPlaylists(limit?: number, offset?: number): Observable<Paging<Playlist>>;
    updateDetails(id: string, name?: string, isPublic?: boolean, isCollaborative?: boolean, description?: string): Observable<boolean>;
    getUsersPlaylists(id: string, limit?: number, offset?: number): Observable<Paging<Playlist>>;
    replacePlaylistTracks(id: string, uris: string[]): Observable<boolean>;
    createPlaylists(userid: string, name: string, isPublic: boolean, isCollaborative: boolean, description?: string): Observable<Playlist>;
    reorderPlaylistTracks(id: string, rangeStart: number, rangeLength: number, insertBefore: number, snapshot?: string): Observable<string>;
}
