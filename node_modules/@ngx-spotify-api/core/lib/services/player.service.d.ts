import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Device } from '../models';
import { CursorPaging } from '../models';
import { PlayHistory } from '../models';
import { Playback } from '../models';
import { TrackCurrent } from '../models';
import { ApiConfig } from '../models';
import * as ɵngcc0 from '@angular/core';
export declare class PlayerService {
    private config;
    private http;
    constructor(config: ApiConfig, http: HttpClient);
    nextTrack(deviceId?: string): Observable<boolean>;
    previousTrack(deviceId?: string): Observable<boolean>;
    seekToPosition(positionMs: number, deviceId?: string): Observable<boolean>;
    getAvailableDevices(): Observable<Device[]>;
    toggleShuffle(shuffle: boolean, deviceId?: string): Observable<boolean>;
    /**
     *
     * @param deviceIds Although an array is accepted, only a single deviceId is currently supported
     * @param forcePlay
     */
    transferPlayback(deviceIds: string[], forcePlay?: boolean): Observable<boolean>;
    getRecentlyPlayedTracks(limit?: number, before?: number, after?: number): Observable<CursorPaging<PlayHistory>>;
    startPlayback(deviceId?: string, context?: string, uris?: string[], offset?: any, positionMs?: number): Observable<boolean>;
    pausePlayback(deviceId?: string): Observable<boolean>;
    toggleRepeatMode(mode: 'track' | 'context' | 'off', deviceId?: string): Observable<boolean>;
    getPlayback(market?: string): Observable<Playback>;
    getCurrentlyPlayingTrack(market?: string): Observable<TrackCurrent>;
    setPlaybackVolume(volume: number, deviceId?: string): Observable<boolean>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PlayerService, [{ optional: true; }, null]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PlayerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicGxheWVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRGV2aWNlIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHsgQ3Vyc29yUGFnaW5nIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHsgUGxheUhpc3RvcnkgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgeyBQbGF5YmFjayB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IFRyYWNrQ3VycmVudCB9IGZyb20gJy4uL21vZGVscyc7XHJcbmltcG9ydCB7IEFwaUNvbmZpZyB9IGZyb20gJy4uL21vZGVscyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBsYXllclNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBjb25maWc7XHJcbiAgICBwcml2YXRlIGh0dHA7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IEFwaUNvbmZpZywgaHR0cDogSHR0cENsaWVudCk7XHJcbiAgICBuZXh0VHJhY2soZGV2aWNlSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgcHJldmlvdXNUcmFjayhkZXZpY2VJZD86IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICBzZWVrVG9Qb3NpdGlvbihwb3NpdGlvbk1zOiBudW1iZXIsIGRldmljZUlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIGdldEF2YWlsYWJsZURldmljZXMoKTogT2JzZXJ2YWJsZTxEZXZpY2VbXT47XHJcbiAgICB0b2dnbGVTaHVmZmxlKHNodWZmbGU6IGJvb2xlYW4sIGRldmljZUlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBkZXZpY2VJZHMgQWx0aG91Z2ggYW4gYXJyYXkgaXMgYWNjZXB0ZWQsIG9ubHkgYSBzaW5nbGUgZGV2aWNlSWQgaXMgY3VycmVudGx5IHN1cHBvcnRlZFxyXG4gICAgICogQHBhcmFtIGZvcmNlUGxheVxyXG4gICAgICovXHJcbiAgICB0cmFuc2ZlclBsYXliYWNrKGRldmljZUlkczogc3RyaW5nW10sIGZvcmNlUGxheT86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgZ2V0UmVjZW50bHlQbGF5ZWRUcmFja3MobGltaXQ/OiBudW1iZXIsIGJlZm9yZT86IG51bWJlciwgYWZ0ZXI/OiBudW1iZXIpOiBPYnNlcnZhYmxlPEN1cnNvclBhZ2luZzxQbGF5SGlzdG9yeT4+O1xyXG4gICAgc3RhcnRQbGF5YmFjayhkZXZpY2VJZD86IHN0cmluZywgY29udGV4dD86IHN0cmluZywgdXJpcz86IHN0cmluZ1tdLCBvZmZzZXQ/OiBhbnksIHBvc2l0aW9uTXM/OiBudW1iZXIpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgcGF1c2VQbGF5YmFjayhkZXZpY2VJZD86IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICB0b2dnbGVSZXBlYXRNb2RlKG1vZGU6ICd0cmFjaycgfCAnY29udGV4dCcgfCAnb2ZmJywgZGV2aWNlSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgZ2V0UGxheWJhY2sobWFya2V0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxQbGF5YmFjaz47XHJcbiAgICBnZXRDdXJyZW50bHlQbGF5aW5nVHJhY2sobWFya2V0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxUcmFja0N1cnJlbnQ+O1xyXG4gICAgc2V0UGxheWJhY2tWb2x1bWUodm9sdW1lOiBudW1iZXIsIGRldmljZUlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxufVxyXG4iXX0=