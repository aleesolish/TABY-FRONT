(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/common'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@ngx-spotify-api/core', ['exports', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/common', '@angular/common/http'], factory) :
    (factory((global['ngx-spotify-api'] = global['ngx-spotify-api'] || {}, global['ngx-spotify-api'].core = {}),global.rxjs,global.rxjs.operators,global.ng.core,global.ng.common,global.ng.common.http));
}(this, (function (exports,rxjs,operators,i0,common,i2) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ApiConfig = /** @class */ (function () {
        function ApiConfig() {
            this.baseUrl = 'https://api.spotify.com';
        }
        return ApiConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthorizationConfig = /** @class */ (function () {
        function AuthorizationConfig() {
            /**
             * \@description This used to prefix the access- and refreshToken inside the local storage.
             */
            this.storagePrefix = 'ngx-spotify-api-';
            /**
             * \@description This is an array of all scopes you need your application to access to. Default all scopes will be requested
             */
            this.scopes = [
                'user-top-read', 'user-read-recently-played',
                'user-read-email', 'user-read-birthdate', 'user-read-private',
                'playlist-read-collaborative', 'playlist-modify-public', 'playlist-read-private', 'playlist-modify-private',
                'user-library-modify', 'user-library-read',
                'user-follow-modify', 'user-follow-read',
                'streaming', 'app-remote-control',
                'user-read-playback-state', 'user-modify-playback-state', 'user-read-currently-playing'
            ];
        }
        return AuthorizationConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SpotifyApiConfig = /** @class */ (function () {
        function SpotifyApiConfig() {
        }
        return SpotifyApiConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthInterceptor = /** @class */ (function () {
        function AuthInterceptor(apiConfig, authConfig) {
            this.apiConfig = apiConfig;
            this.authConfig = authConfig;
        }
        /**
         * @private
         * @param {?} req
         * @return {?}
         */
        AuthInterceptor.prototype.attachAuthorizationHeader = /**
         * @private
         * @param {?} req
         * @return {?}
         */
            function (req) {
                return this.authConfig.accessToken().pipe(operators.map(function (token) {
                    return req.clone({
                        headers: req.headers.set('Authorization', 'Bearer ' + token)
                    });
                }));
            };
        /**
         * @param {?} origReq
         * @param {?} next
         * @return {?}
         */
        AuthInterceptor.prototype.intercept = /**
         * @param {?} origReq
         * @param {?} next
         * @return {?}
         */
            function (origReq, next) {
                return this.attachAuthorizationHeader(origReq).pipe(operators.flatMap(function (req) {
                    return next.handle(req);
                }));
            };
        AuthInterceptor.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        AuthInterceptor.ctorParameters = function () {
            return [
                { type: ApiConfig },
                { type: AuthorizationConfig }
            ];
        };
        return AuthInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CorsInterceptor = /** @class */ (function () {
        function CorsInterceptor(apiConfig) {
            this.apiConfig = apiConfig;
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        CorsInterceptor.prototype.intercept = /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
            function (req, next) {
                /** @type {?} */
                var headers = req.headers;
                if (req.url.indexOf(this.apiConfig.baseUrl) > -1) {
                    headers = headers.set('Accept', 'application/json');
                    headers = headers.set('Content-Type', 'application/json');
                }
                else if (req.url.indexOf('authorize')) ;
                /** @type {?} */
                var newReq = req.clone({
                    headers: headers
                });
                return next.handle(newReq);
            };
        CorsInterceptor.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        CorsInterceptor.ctorParameters = function () {
            return [
                { type: ApiConfig }
            ];
        };
        return CorsInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RemoveNullParamsInterceptor = /** @class */ (function () {
        function RemoveNullParamsInterceptor(apiConfig) {
            this.apiConfig = apiConfig;
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        RemoveNullParamsInterceptor.prototype.intercept = /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
            function (req, next) {
                /** @type {?} */
                var params = new i2.HttpParams();
                if (req.url.indexOf(this.apiConfig.baseUrl) > -1) {
                    params.keys().forEach(function (key) {
                        /** @type {?} */
                        var param = params.get(key);
                        if (param != null && param !== 'null' && param !== 'undefined' && param !== '') {
                            params.set(key, param);
                        }
                    });
                }
                /** @type {?} */
                var newReq = req.clone({
                    'params': params
                });
                return next.handle(newReq);
            };
        RemoveNullParamsInterceptor.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        RemoveNullParamsInterceptor.ctorParameters = function () {
            return [
                { type: ApiConfig }
            ];
        };
        return RemoveNullParamsInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UnderscoreToCamelcaseInterceptor = /** @class */ (function () {
        function UnderscoreToCamelcaseInterceptor(apiConfig, authConfig) {
            this.apiConfig = apiConfig;
            this.authConfig = authConfig;
        }
        /**
         * @private
         * @param {?} object
         * @return {?}
         */
        UnderscoreToCamelcaseInterceptor.prototype.transformObjectKeysToCamelCase = /**
         * @private
         * @param {?} object
         * @return {?}
         */
            function (object) {
                var _this = this;
                if (object == null || object === {}) {
                    return object;
                }
                /** @type {?} */
                var ret = {};
                Object.keys(object).forEach(function (key) {
                    /** @type {?} */
                    var newKey = key.replace(/[_]([^_])?/g, function (v) {
                        return v.replace('_', '').toUpperCase();
                    });
                    if (object[key] instanceof Array) {
                        ret[newKey] = object[key].map(function (value) {
                            return _this.transformObjectKeysToCamelCase(value);
                        });
                    }
                    else if (object[key] instanceof Object) {
                        ret[newKey] = _this.transformObjectKeysToCamelCase(object[key]);
                    }
                    else {
                        ret[newKey] = object[key];
                    }
                });
                return ret;
            };
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        UnderscoreToCamelcaseInterceptor.prototype.intercept = /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
            function (req, next) {
                var _this = this;
                return next.handle(req).pipe(operators.map(function (res) {
                    if (req && req.url && req.url.includes(_this.apiConfig.baseUrl) && res.body) {
                        return res.clone({
                            body: _this.transformObjectKeysToCamelCase(res.body)
                        });
                    }
                    return res;
                }));
            };
        UnderscoreToCamelcaseInterceptor.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        UnderscoreToCamelcaseInterceptor.ctorParameters = function () {
            return [
                { type: ApiConfig },
                { type: AuthorizationConfig }
            ];
        };
        return UnderscoreToCamelcaseInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Http interceptor providers in outside-in order
     * @type {?}
     */
    var httpInterceptorProviders = [
        { provide: i2.HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
        { provide: i2.HTTP_INTERCEPTORS, useClass: CorsInterceptor, multi: true },
        { provide: i2.HTTP_INTERCEPTORS, useClass: RemoveNullParamsInterceptor, multi: true },
        { provide: i2.HTTP_INTERCEPTORS, useClass: UnderscoreToCamelcaseInterceptor, multi: true }
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Album = /** @class */ (function () {
        function Album() {
        }
        return Album;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AlbumSimplified = /** @class */ (function () {
        function AlbumSimplified() {
        }
        return AlbumSimplified;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Artist = /** @class */ (function () {
        function Artist() {
        }
        return Artist;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ArtistSimplified = /** @class */ (function () {
        function ArtistSimplified() {
        }
        return ArtistSimplified;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AudioAnalysis = /** @class */ (function () {
        function AudioAnalysis() {
        }
        return AudioAnalysis;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AudioFeatures = /** @class */ (function () {
        function AudioFeatures() {
        }
        return AudioFeatures;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Category = /** @class */ (function () {
        function Category() {
        }
        return Category;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Context = /** @class */ (function () {
        function Context() {
        }
        return Context;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Copyright = /** @class */ (function () {
        function Copyright() {
        }
        return Copyright;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Cursor = /** @class */ (function () {
        function Cursor() {
        }
        return Cursor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template C
     */
    var /**
     * @template C
     */ CursorPaging = /** @class */ (function () {
        function CursorPaging() {
        }
        return CursorPaging;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Device = /** @class */ (function () {
        function Device() {
        }
        return Device;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Error = /** @class */ (function () {
        function Error() {
        }
        return Error;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExternalId = /** @class */ (function () {
        function ExternalId() {
        }
        return ExternalId;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExternalUrl = /** @class */ (function () {
        function ExternalUrl() {
        }
        return ExternalUrl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FeaturedPlaylists = /** @class */ (function () {
        function FeaturedPlaylists() {
        }
        return FeaturedPlaylists;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Followers = /** @class */ (function () {
        function Followers() {
        }
        return Followers;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Image = /** @class */ (function () {
        function Image() {
        }
        return Image;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template C
     */
    var /**
     * @template C
     */ Paging = /** @class */ (function () {
        function Paging() {
        }
        return Paging;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PlayHistory = /** @class */ (function () {
        function PlayHistory() {
        }
        return PlayHistory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Playback = /** @class */ (function () {
        function Playback() {
        }
        return Playback;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PlayerError = /** @class */ (function (_super) {
        __extends(PlayerError, _super);
        function PlayerError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PlayerError;
    }(Error));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Playlist = /** @class */ (function () {
        function Playlist() {
        }
        return Playlist;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PlaylistSimplified = /** @class */ (function () {
        function PlaylistSimplified() {
        }
        return PlaylistSimplified;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PlaylistTrack = /** @class */ (function () {
        function PlaylistTrack() {
        }
        return PlaylistTrack;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Recommendations = /** @class */ (function () {
        function Recommendations() {
        }
        return Recommendations;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RecommendationsSeed = /** @class */ (function () {
        function RecommendationsSeed() {
        }
        return RecommendationsSeed;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Restriction = /** @class */ (function () {
        function Restriction() {
        }
        return Restriction;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SavedAlbum = /** @class */ (function () {
        function SavedAlbum() {
        }
        return SavedAlbum;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SavedTrack = /** @class */ (function () {
        function SavedTrack() {
        }
        return SavedTrack;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchResult = /** @class */ (function () {
        function SearchResult() {
        }
        return SearchResult;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Track = /** @class */ (function () {
        function Track() {
        }
        return Track;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TrackCurrent = /** @class */ (function () {
        function TrackCurrent() {
        }
        return TrackCurrent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TrackLink = /** @class */ (function () {
        function TrackLink() {
        }
        return TrackLink;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TrackSimplified = /** @class */ (function () {
        function TrackSimplified() {
        }
        return TrackSimplified;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserPrivate = /** @class */ (function () {
        function UserPrivate() {
        }
        return UserPrivate;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserPublic = /** @class */ (function () {
        function UserPublic() {
        }
        return UserPublic;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AlbumService = /** @class */ (function () {
        function AlbumService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} id
         * @param {?=} market
         * @return {?}
         */
        AlbumService.prototype.getAlbum = /**
         * @param {?} id
         * @param {?=} market
         * @return {?}
         */
            function (id, market) {
                return this.http.get(this.config.baseUrl + '/v1/albums/' + id, {
                    params: {
                        market: market
                    }
                });
            };
        /**
         * @param {?} id
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} market
         * @return {?}
         */
        AlbumService.prototype.getAlbumTracks = /**
         * @param {?} id
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} market
         * @return {?}
         */
            function (id, limit, offset, market) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + '/v1/albums/' + id + '/tracks', {
                    params: {
                        limit: limit.toString(),
                        offset: offset.toString(),
                        market: market
                    }
                });
            };
        /**
         * @param {?} ids
         * @param {?=} market
         * @return {?}
         */
        AlbumService.prototype.getAlbums = /**
         * @param {?} ids
         * @param {?=} market
         * @return {?}
         */
            function (ids, market) {
                if (ids == null || ids.length < 1) {
                    return rxjs.of([]);
                }
                else if (ids.length > 20) {
                    return rxjs.of(null);
                }
                return this.http.get(this.config.baseUrl + '/v1/albums', {
                    params: {
                        ids: ids.join(','),
                        market: market
                    }
                }).pipe(operators.map(function (res) {
                    return res.albums;
                }));
            };
        AlbumService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        AlbumService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ AlbumService.ngInjectableDef = i0.defineInjectable({ factory: function AlbumService_Factory() { return new AlbumService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: AlbumService, providedIn: "root" });
        return AlbumService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ArtistService = /** @class */ (function () {
        function ArtistService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} id
         * @return {?}
         */
        ArtistService.prototype.getArtist = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.http.get(this.config.baseUrl + '/v1/artists/' + id, {
                    params: {}
                });
            };
        /**
         * @param {?} id
         * @param {?=} includeGroups
         * @param {?=} market
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
        ArtistService.prototype.getArtistsAlbums = /**
         * @param {?} id
         * @param {?=} includeGroups
         * @param {?=} market
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
            function (id, includeGroups, market, limit, offset) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + '/v1/artists/' + id + '/albums', {
                    params: {
                        include_groups: includeGroups ? includeGroups.join(',') : null,
                        market: market,
                        limit: limit.toString(),
                        offset: offset.toString()
                    }
                });
            };
        /**
         * @param {?} id
         * @param {?} market
         * @return {?}
         */
        ArtistService.prototype.getArtistsTopTracks = /**
         * @param {?} id
         * @param {?} market
         * @return {?}
         */
            function (id, market) {
                return this.http.get(this.config.baseUrl + '/v1/artists/' + id + '/top-tracks', {
                    params: {
                        market: market
                    }
                }).pipe(operators.map(function (res) {
                    return res.tracks;
                }));
            };
        /**
         * @param {?} id
         * @return {?}
         */
        ArtistService.prototype.getArtistsRelatedArtists = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.http.get(this.config.baseUrl + '/v1/artists/' + id + '/related-artists', {
                    params: {}
                }).pipe(operators.map(function (res) {
                    return res.artists;
                }));
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        ArtistService.prototype.getArtists = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids == null || ids.length < 1) {
                    return rxjs.of([]);
                }
                else if (ids.length > 50) {
                    return rxjs.of(null);
                }
                return this.http.get(this.config.baseUrl + '/v1/artists/', {
                    params: {
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function (res) {
                    return res.artists;
                }));
            };
        ArtistService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ArtistService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ ArtistService.ngInjectableDef = i0.defineInjectable({ factory: function ArtistService_Factory() { return new ArtistService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: ArtistService, providedIn: "root" });
        return ArtistService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BrowseService = /** @class */ (function () {
        function BrowseService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} id
         * @param {?=} country
         * @param {?=} locale
         * @return {?}
         */
        BrowseService.prototype.getCategory = /**
         * @param {?} id
         * @param {?=} country
         * @param {?=} locale
         * @return {?}
         */
            function (id, country, locale) {
                return this.http.get(this.config.baseUrl + '/v1/browse/categories/' + id, {
                    params: {
                        country: country,
                        locale: locale
                    }
                });
            };
        /**
         * @param {?} id
         * @param {?=} country
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
        BrowseService.prototype.getCategoryPlaylists = /**
         * @param {?} id
         * @param {?=} country
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
            function (id, country, limit, offset) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + '/v1/browse/categories/' + id + '/playlists', {
                    params: {
                        country: country,
                        limit: limit.toString(),
                        offset: offset.toString()
                    }
                }).pipe(operators.map(function (res) {
                    return res.playlists;
                }));
            };
        /**
         * @param {?=} country
         * @param {?=} locale
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
        BrowseService.prototype.getCategories = /**
         * @param {?=} country
         * @param {?=} locale
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
            function (country, locale, limit, offset) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + '/v1/browse/categories', {
                    params: {
                        country: country,
                        locale: locale,
                        limit: limit.toString(),
                        offset: offset.toString()
                    }
                }).pipe(operators.map(function (list) {
                    return list.categories;
                }));
            };
        /**
         * @param {?=} country
         * @param {?=} locale
         * @param {?=} timestamp
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
        BrowseService.prototype.getFeaturedPlaylists = /**
         * @param {?=} country
         * @param {?=} locale
         * @param {?=} timestamp
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
            function (country, locale, timestamp, limit, offset) {
                if (timestamp === void 0) {
                    timestamp = new Date();
                }
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + '/v1/browse/featured-playlists', {
                    params: {
                        country: country,
                        locale: locale,
                        timestamp: timestamp.toISOString(),
                        limit: limit.toString(),
                        offset: offset.toString()
                    }
                });
            };
        /**
         * @param {?=} country
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
        BrowseService.prototype.getNewReleases = /**
         * @param {?=} country
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
            function (country, limit, offset) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + '/v1/browse/new-releases', {
                    params: {
                        country: country,
                        limit: limit.toString(),
                        offset: offset.toString()
                    }
                }).pipe(operators.map(function (_a) {
                    var albums = _a.albums;
                    return albums;
                }));
            };
        BrowseService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        BrowseService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ BrowseService.ngInjectableDef = i0.defineInjectable({ factory: function BrowseService_Factory() { return new BrowseService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: BrowseService, providedIn: "root" });
        return BrowseService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FollowService = /** @class */ (function () {
        function FollowService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} ids
         * @return {?}
         */
        FollowService.prototype.isFollowingArtists = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids.length === 0) {
                    return rxjs.of([]);
                }
                else if (ids.length > 50) {
                    return rxjs.of(null);
                }
                return this.http.get(this.config.baseUrl + '/v1/me/following/contains', {
                    params: {
                        type: 'artist',
                        ids: ids.join(',')
                    }
                });
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        FollowService.prototype.isFollowingUsers = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids.length === 0) {
                    return rxjs.of([]);
                }
                else if (ids.length > 50) {
                    return rxjs.of(null);
                }
                return this.http.get(this.config.baseUrl + '/v1/me/following/contains', {
                    params: {
                        type: 'user',
                        ids: ids.join(',')
                    }
                });
            };
        /**
         * @param {?} playlistId
         * @param {?} usersToCheck
         * @return {?}
         */
        FollowService.prototype.areFollowingPlaylist = /**
         * @param {?} playlistId
         * @param {?} usersToCheck
         * @return {?}
         */
            function (playlistId, usersToCheck) {
                if (usersToCheck === null || usersToCheck.length === 0) {
                    return rxjs.of([]);
                }
                else if (usersToCheck.length > 5) {
                    return rxjs.of(null);
                }
                return this.http.get(this.config.baseUrl + ("/v1/playlists/" + playlistId + "/followers/contains"), {
                    params: {
                        ids: usersToCheck.join(',')
                    }
                });
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        FollowService.prototype.followArtists = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids.length === 0) {
                    return rxjs.of(false);
                }
                else if (ids.length > 50) {
                    return rxjs.of(false);
                }
                return this.http.put(this.config.baseUrl + '/v1/me/following', {}, {
                    params: {
                        type: 'artist',
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function () {
                    return true;
                }));
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        FollowService.prototype.followUsers = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids.length === 0) {
                    return rxjs.of(false);
                }
                else if (ids.length > 50) {
                    return rxjs.of(false);
                }
                return this.http.put(this.config.baseUrl + '/v1/me/following', {}, {
                    params: {
                        type: 'user',
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function () {
                    return true;
                }));
            };
        /**
         * @param {?} id
         * @param {?=} isPublic
         * @return {?}
         */
        FollowService.prototype.followPlaylist = /**
         * @param {?} id
         * @param {?=} isPublic
         * @return {?}
         */
            function (id, isPublic) {
                if (isPublic === void 0) {
                    isPublic = false;
                }
                return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/followers"), {
                    public: isPublic
                }).pipe(operators.map(function () {
                    return true;
                }));
            };
        /**
         * @param {?=} limit
         * @param {?=} after
         * @return {?}
         */
        FollowService.prototype.getFollowedArtists = /**
         * @param {?=} limit
         * @param {?=} after
         * @return {?}
         */
            function (limit, after) {
                if (limit === void 0) {
                    limit = 20;
                }
                return this.http.get(this.config.baseUrl + "/v1/me/following", {
                    params: {
                        type: 'artist',
                        limit: limit.toString(),
                        after: after
                    }
                });
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        FollowService.prototype.unfollowArtists = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids.length === 0) {
                    return rxjs.of(false);
                }
                else if (ids.length > 50) {
                    return rxjs.of(false);
                }
                return this.http.delete(this.config.baseUrl + '/v1/me/following', {
                    params: {
                        type: 'artist',
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function () { return true; }));
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        FollowService.prototype.unfollowUsers = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids.length === 0) {
                    return rxjs.of(false);
                }
                else if (ids.length > 50) {
                    return rxjs.of(false);
                }
                return this.http.delete(this.config.baseUrl + '/v1/me/following', {
                    params: {
                        type: 'user',
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function () { return true; }));
            };
        /**
         * @param {?} id
         * @return {?}
         */
        FollowService.prototype.unfollowPlaylist = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.http.delete(this.config.baseUrl + ("/v1/playlists/" + id + "/followers")).pipe(operators.map(function () { return true; }));
            };
        FollowService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FollowService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ FollowService.ngInjectableDef = i0.defineInjectable({ factory: function FollowService_Factory() { return new FollowService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: FollowService, providedIn: "root" });
        return FollowService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LibraryService = /** @class */ (function () {
        function LibraryService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} ids
         * @return {?}
         */
        LibraryService.prototype.areSavedAlbums = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids === undefined || ids.length === 0) {
                    return rxjs.of([]);
                }
                else if (ids.length > 50) {
                    return rxjs.of(null);
                }
                return this.http.get(this.config.baseUrl + "/v1/me/albums/contains", {
                    params: {
                        ids: ids.join(',')
                    }
                });
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        LibraryService.prototype.areSavedTracks = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids === undefined || ids.length === 0) {
                    return rxjs.of([]);
                }
                else if (ids.length > 50) {
                    return rxjs.of(null);
                }
                return this.http.get(this.config.baseUrl + "/v1/me/tracks/contains", {
                    params: {
                        ids: ids.join(',')
                    }
                });
            };
        /**
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} market
         * @return {?}
         */
        LibraryService.prototype.getSavedAlbums = /**
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} market
         * @return {?}
         */
            function (limit, offset, market) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + "/v1/me/albums", {
                    params: {
                        limit: limit.toString(),
                        offset: offset.toString(),
                        market: market
                    }
                });
            };
        /**
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} market
         * @return {?}
         */
        LibraryService.prototype.getSavedTracks = /**
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} market
         * @return {?}
         */
            function (limit, offset, market) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + "/v1/me/tracks", {
                    params: {
                        limit: limit.toString(),
                        offset: offset.toString(),
                        market: market
                    }
                });
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        LibraryService.prototype.saveAlbums = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids === undefined || ids.length === 0) {
                    return rxjs.of(false);
                }
                else if (ids.length > 50) {
                    return rxjs.of(false);
                }
                return this.http.put(this.config.baseUrl + "/v1/me/albums", {}, {
                    params: {
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function () { return true; }));
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        LibraryService.prototype.removeAlbums = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids === undefined || ids.length === 0) {
                    return rxjs.of(false);
                }
                else if (ids.length > 50) {
                    return rxjs.of(false);
                }
                return this.http.delete(this.config.baseUrl + "/v1/me/albums", {
                    params: {
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function () { return true; }));
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        LibraryService.prototype.saveTracks = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids === undefined || ids.length === 0) {
                    return rxjs.of(false);
                }
                else if (ids.length > 50) {
                    return rxjs.of(false);
                }
                return this.http.put(this.config.baseUrl + "/v1/me/tracks", {}, {
                    params: {
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function () { return true; }));
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        LibraryService.prototype.removeTracks = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === null || ids === undefined || ids.length === 0) {
                    return rxjs.of(false);
                }
                else if (ids.length > 50) {
                    return rxjs.of(false);
                }
                return this.http.delete(this.config.baseUrl + "/v1/me/tracks", {
                    params: {
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function () { return true; }));
            };
        LibraryService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LibraryService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ LibraryService.ngInjectableDef = i0.defineInjectable({ factory: function LibraryService_Factory() { return new LibraryService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: LibraryService, providedIn: "root" });
        return LibraryService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PersonalizationService = /** @class */ (function () {
        function PersonalizationService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} timeRange
         * @return {?}
         */
        PersonalizationService.prototype.getTopArtists = /**
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} timeRange
         * @return {?}
         */
            function (limit, offset, timeRange) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + "/v1/me/top/artists", {
                    params: {
                        limit: limit.toString(),
                        offset: offset.toString(),
                        time_range: timeRange
                    }
                });
            };
        /**
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} timeRange
         * @return {?}
         */
        PersonalizationService.prototype.getTopTracks = /**
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} timeRange
         * @return {?}
         */
            function (limit, offset, timeRange) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + "/v1/me/top/tracks", {
                    params: {
                        limit: limit.toString(),
                        offset: offset.toString(),
                        time_range: timeRange
                    }
                });
            };
        PersonalizationService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        PersonalizationService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ PersonalizationService.ngInjectableDef = i0.defineInjectable({ factory: function PersonalizationService_Factory() { return new PersonalizationService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: PersonalizationService, providedIn: "root" });
        return PersonalizationService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PlayerService = /** @class */ (function () {
        function PlayerService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?=} deviceId
         * @return {?}
         */
        PlayerService.prototype.nextTrack = /**
         * @param {?=} deviceId
         * @return {?}
         */
            function (deviceId) {
                return this.http.post(this.config.baseUrl + "/v1/me/player/next", {}, {
                    params: {
                        device_id: deviceId
                    }
                }).pipe(operators.take(1), operators.map(function () {
                    return true;
                }));
            };
        /**
         * @param {?=} deviceId
         * @return {?}
         */
        PlayerService.prototype.previousTrack = /**
         * @param {?=} deviceId
         * @return {?}
         */
            function (deviceId) {
                return this.http.post(this.config.baseUrl + "/v1/me/player/previous", {}, {
                    params: {
                        device_id: deviceId
                    }
                }).pipe(operators.take(1), operators.map(function () {
                    return true;
                }));
            };
        /**
         * @param {?} positionMs
         * @param {?=} deviceId
         * @return {?}
         */
        PlayerService.prototype.seekToPosition = /**
         * @param {?} positionMs
         * @param {?=} deviceId
         * @return {?}
         */
            function (positionMs, deviceId) {
                return this.http.put(this.config.baseUrl + "/v1/me/player/seek", {}, {
                    params: {
                        position_ms: positionMs.toString(),
                        device_id: deviceId
                    }
                }).pipe(operators.take(1), operators.map(function () {
                    return true;
                }));
            };
        /**
         * @return {?}
         */
        PlayerService.prototype.getAvailableDevices = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.config.baseUrl + "/v1/me/player/devices").pipe(operators.map(function (list) { return list.devices; }));
            };
        /**
         * @param {?} shuffle
         * @param {?=} deviceId
         * @return {?}
         */
        PlayerService.prototype.toggleShuffle = /**
         * @param {?} shuffle
         * @param {?=} deviceId
         * @return {?}
         */
            function (shuffle, deviceId) {
                return this.http.put(this.config.baseUrl + "/v1/me/player/shuffle", {}, {
                    params: {
                        state: shuffle.toString(),
                        device_id: deviceId
                    }
                }).pipe(operators.take(1), operators.map(function () {
                    return true;
                }));
            };
        /**
         *
         * @param deviceIds Although an array is accepted, only a single deviceId is currently supported
         * @param forcePlay
         */
        /**
         *
         * @param {?} deviceIds Although an array is accepted, only a single deviceId is currently supported
         * @param {?=} forcePlay
         * @return {?}
         */
        PlayerService.prototype.transferPlayback = /**
         *
         * @param {?} deviceIds Although an array is accepted, only a single deviceId is currently supported
         * @param {?=} forcePlay
         * @return {?}
         */
            function (deviceIds, forcePlay) {
                if (forcePlay === void 0) {
                    forcePlay = false;
                }
                return this.http.put(this.config.baseUrl + "/v1/me/player", {
                    device_ids: deviceIds.join(','),
                    play: forcePlay
                }).pipe(operators.take(1), operators.map(function () {
                    return true;
                }));
            };
        /**
         * @param {?=} limit
         * @param {?=} before
         * @param {?=} after
         * @return {?}
         */
        PlayerService.prototype.getRecentlyPlayedTracks = /**
         * @param {?=} limit
         * @param {?=} before
         * @param {?=} after
         * @return {?}
         */
            function (limit, before, after) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (after === void 0) {
                    after = 0;
                }
                return this.http.get(this.config.baseUrl + "/v1/me/player/recently-played", {
                    params: {
                        limit: limit.toString(),
                        before: (before ? before.toString() : undefined),
                        after: after.toString(),
                    }
                });
            };
        /**
         * @param {?=} deviceId
         * @param {?=} context
         * @param {?=} uris
         * @param {?=} offset
         * @param {?=} positionMs
         * @return {?}
         */
        PlayerService.prototype.startPlayback = /**
         * @param {?=} deviceId
         * @param {?=} context
         * @param {?=} uris
         * @param {?=} offset
         * @param {?=} positionMs
         * @return {?}
         */
            function (deviceId, context, uris, offset, positionMs) {
                return this.http.put(this.config.baseUrl + "/v1/me/player/play", {
                    context_uri: context,
                    uris: uris,
                    offset: offset,
                    position_ms: positionMs
                }, {
                    params: {
                        device_id: deviceId
                    }
                }).pipe(operators.take(1), operators.map(function () {
                    return true;
                }));
            };
        /**
         * @param {?=} deviceId
         * @return {?}
         */
        PlayerService.prototype.pausePlayback = /**
         * @param {?=} deviceId
         * @return {?}
         */
            function (deviceId) {
                return this.http.put(this.config.baseUrl + "/v1/me/player/pause", {}, {
                    params: {
                        device_id: deviceId
                    }
                }).pipe(operators.take(1), operators.map(function () {
                    return true;
                }));
            };
        /**
         * @param {?} mode
         * @param {?=} deviceId
         * @return {?}
         */
        PlayerService.prototype.toggleRepeatMode = /**
         * @param {?} mode
         * @param {?=} deviceId
         * @return {?}
         */
            function (mode, deviceId) {
                return this.http.put(this.config.baseUrl + "/v1/me/player/repeat", {}, {
                    params: {
                        state: mode,
                        device_id: deviceId
                    }
                }).pipe(operators.take(1), operators.map(function () {
                    return true;
                }));
            };
        /**
         * @param {?=} market
         * @return {?}
         */
        PlayerService.prototype.getPlayback = /**
         * @param {?=} market
         * @return {?}
         */
            function (market) {
                return this.http.get(this.config.baseUrl + "/v1/me/player", {
                    params: {
                        market: market
                    }
                });
            };
        /**
         * @param {?=} market
         * @return {?}
         */
        PlayerService.prototype.getCurrentlyPlayingTrack = /**
         * @param {?=} market
         * @return {?}
         */
            function (market) {
                return this.http.get(this.config.baseUrl + "/v1/me/player/currently-playing", {
                    params: {
                        market: market
                    }
                });
            };
        /**
         * @param {?} volume
         * @param {?=} deviceId
         * @return {?}
         */
        PlayerService.prototype.setPlaybackVolume = /**
         * @param {?} volume
         * @param {?=} deviceId
         * @return {?}
         */
            function (volume, deviceId) {
                return this.http.put(this.config.baseUrl + "/v1/me/player/volume", {}, {
                    params: {
                        volume_percent: volume.toString(),
                        device_id: deviceId
                    }
                }).pipe(operators.take(1), operators.map(function () {
                    return true;
                }));
            };
        PlayerService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        PlayerService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ PlayerService.ngInjectableDef = i0.defineInjectable({ factory: function PlayerService_Factory() { return new PlayerService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: PlayerService, providedIn: "root" });
        return PlayerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PlaylistService = /** @class */ (function () {
        function PlaylistService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} id
         * @param {?} uris
         * @param {?} position
         * @return {?}
         */
        PlaylistService.prototype.addTracksToPlaylist = /**
         * @param {?} id
         * @param {?} uris
         * @param {?} position
         * @return {?}
         */
            function (id, uris, position) {
                if (typeof uris !== typeof [] || uris.length < 1 || uris.length > 100) {
                    return rxjs.of(null);
                }
                return this.http.post(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
                    uris: uris,
                    position: position
                }).pipe(operators.map(function (_a) {
                    var snapshotId = _a.snapshotId;
                    return snapshotId;
                }));
            };
        /**
         * @param {?} id
         * @param {?} uris
         * @return {?}
         */
        PlaylistService.prototype.removeTracksFromPlaylist = /**
         * @param {?} id
         * @param {?} uris
         * @return {?}
         */
            function (id, uris) {
                if (typeof uris !== typeof [] || uris.length < 1 || uris.length > 100) {
                    return rxjs.of(null);
                }
                return this.http.request('DELETE', this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
                    body: {
                        tracks: uris.map(function (uri) {
                            return { uri: uri };
                        })
                    }
                }).pipe(operators.map(function (_a) {
                    var snapshotId = _a.snapshotId;
                    return snapshotId;
                }));
            };
        /**
         * @param {?} id
         * @param {?=} market
         * @return {?}
         */
        PlaylistService.prototype.getPlaylist = /**
         * @param {?} id
         * @param {?=} market
         * @return {?}
         */
            function (id, market) {
                return this.http.get(this.config.baseUrl + ("/v1/playlists/" + id), {
                    params: {
                        market: market || ''
                    }
                });
            };
        /**
         * @param {?} id
         * @param {?} market
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
        PlaylistService.prototype.getPlaylistTracks = /**
         * @param {?} id
         * @param {?} market
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
            function (id, market, limit, offset) {
                if (limit === void 0) {
                    limit = 100;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
                    params: {
                        limit: limit.toString(),
                        offset: offset.toString(),
                        market: market
                    }
                });
            };
        /**
         * @param {?} id
         * @return {?}
         */
        PlaylistService.prototype.getPlaylistCover = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.http.get(this.config.baseUrl + ("/v1/playlists/" + id + "/images"));
            };
        /**
         *
         * @param id id of playlist
         * @param image base64 encoded jpeg (max. 256KB)
         */
        /**
         *
         * @param {?} id id of playlist
         * @param {?} image base64 encoded jpeg (max. 256KB)
         * @return {?}
         */
        PlaylistService.prototype.uploadPlaylistCover = /**
         *
         * @param {?} id id of playlist
         * @param {?} image base64 encoded jpeg (max. 256KB)
         * @return {?}
         */
            function (id, image) {
                return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/images"), image, {
                    headers: {
                        'Content-Type': 'image/jpeg'
                    }
                }).pipe(operators.map(function (res) {
                    return true;
                }));
            };
        /**
         *
         * @param limit min=1, default=20, max=50
         * @param offset min=0, default=0, max=100000
         */
        /**
         *
         * @param {?=} limit min=1, default=20, max=50
         * @param {?=} offset min=0, default=0, max=100000
         * @return {?}
         */
        PlaylistService.prototype.getOwnPlaylists = /**
         *
         * @param {?=} limit min=1, default=20, max=50
         * @param {?=} offset min=0, default=0, max=100000
         * @return {?}
         */
            function (limit, offset) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + "/v1/me/playlists", {
                    params: {
                        limit: limit.toString(),
                        offset: offset.toString()
                    }
                });
            };
        /**
         * @param {?} id
         * @param {?=} name
         * @param {?=} isPublic
         * @param {?=} isCollaborative
         * @param {?=} description
         * @return {?}
         */
        PlaylistService.prototype.updateDetails = /**
         * @param {?} id
         * @param {?=} name
         * @param {?=} isPublic
         * @param {?=} isCollaborative
         * @param {?=} description
         * @return {?}
         */
            function (id, name, isPublic, isCollaborative, description) {
                return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id), {
                    name: name,
                    public: isPublic,
                    collaborative: isCollaborative,
                    description: description
                }, {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).pipe(operators.map(function (res) {
                    return true;
                }));
            };
        /**
         * @param {?} id
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
        PlaylistService.prototype.getUsersPlaylists = /**
         * @param {?} id
         * @param {?=} limit
         * @param {?=} offset
         * @return {?}
         */
            function (id, limit, offset) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + ("/v1/users/" + id + "/playlists"), {
                    params: {
                        limit: limit.toString(),
                        offset: offset.toString()
                    }
                });
            };
        /**
         * @param {?} id
         * @param {?} uris
         * @return {?}
         */
        PlaylistService.prototype.replacePlaylistTracks = /**
         * @param {?} id
         * @param {?} uris
         * @return {?}
         */
            function (id, uris) {
                return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
                    uris: uris
                }, {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).pipe(operators.map(function (res) {
                    return true;
                }));
            };
        /**
         * @param {?} userid
         * @param {?} name
         * @param {?} isPublic
         * @param {?} isCollaborative
         * @param {?=} description
         * @return {?}
         */
        PlaylistService.prototype.createPlaylists = /**
         * @param {?} userid
         * @param {?} name
         * @param {?} isPublic
         * @param {?} isCollaborative
         * @param {?=} description
         * @return {?}
         */
            function (userid, name, isPublic, isCollaborative, description) {
                if (description === void 0) {
                    description = '';
                }
                return this.http.post(this.config.baseUrl + ("/v1/users/" + userid + "/playlists"), {
                    name: name,
                    public: isPublic,
                    collaborative: isCollaborative,
                    description: description
                }, {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            };
        /**
         * @param {?} id
         * @param {?} rangeStart
         * @param {?} rangeLength
         * @param {?} insertBefore
         * @param {?=} snapshot
         * @return {?}
         */
        PlaylistService.prototype.reorderPlaylistTracks = /**
         * @param {?} id
         * @param {?} rangeStart
         * @param {?} rangeLength
         * @param {?} insertBefore
         * @param {?=} snapshot
         * @return {?}
         */
            function (id, rangeStart, rangeLength, insertBefore, snapshot) {
                return this.http.put(this.config.baseUrl + ("/v1/playlists/" + id + "/tracks"), {
                    range_start: rangeStart,
                    insert_before: insertBefore,
                    range_length: rangeLength,
                    snapshot_id: snapshot
                }, {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).pipe(operators.map(function (s) { return s.snapshotId; }));
            };
        PlaylistService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        PlaylistService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ PlaylistService.ngInjectableDef = i0.defineInjectable({ factory: function PlaylistService_Factory() { return new PlaylistService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: PlaylistService, providedIn: "root" });
        return PlaylistService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchService = /** @class */ (function () {
        function SearchService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} searchTerms
         * @param {?} types
         * @param {?=} market
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} includeExternal
         * @return {?}
         */
        SearchService.prototype.search = /**
         * @param {?} searchTerms
         * @param {?} types
         * @param {?=} market
         * @param {?=} limit
         * @param {?=} offset
         * @param {?=} includeExternal
         * @return {?}
         */
            function (searchTerms, types, market, limit, offset, includeExternal) {
                if (limit === void 0) {
                    limit = 20;
                }
                if (offset === void 0) {
                    offset = 0;
                }
                return this.http.get(this.config.baseUrl + "/v1/search", {
                    params: {
                        q: encodeURIComponent(searchTerms),
                        type: types.join(','),
                        market: market,
                        limit: limit.toString(),
                        offset: offset.toString(),
                        include_external: includeExternal ? 'audio' : undefined
                    }
                });
            };
        SearchService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        SearchService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ SearchService.ngInjectableDef = i0.defineInjectable({ factory: function SearchService_Factory() { return new SearchService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: SearchService, providedIn: "root" });
        return SearchService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TrackService = /** @class */ (function () {
        function TrackService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} id
         * @param {?=} market
         * @return {?}
         */
        TrackService.prototype.getTrack = /**
         * @param {?} id
         * @param {?=} market
         * @return {?}
         */
            function (id, market) {
                return this.http.get(this.config.baseUrl + ("/v1/tracks/" + id), {
                    params: {
                        market: market
                    }
                });
            };
        /**
         * @param {?} id
         * @return {?}
         */
        TrackService.prototype.getAudioFeatures = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.http.get(this.config.baseUrl + ("/v1/audio-features/" + id));
            };
        /**
         * @param {?} id
         * @return {?}
         */
        TrackService.prototype.getAudioAnalysis = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.http.get(this.config.baseUrl + ("/v1/audio-analysis/" + id));
            };
        /**
         * @param {?} ids
         * @param {?=} market
         * @return {?}
         */
        TrackService.prototype.getTracks = /**
         * @param {?} ids
         * @param {?=} market
         * @return {?}
         */
            function (ids, market) {
                if (ids === undefined || ids === null || ids.length === 0) {
                    return rxjs.of([]);
                }
                else if (ids.length > 50) {
                    return rxjs.of(null);
                }
                return this.http.get(this.config.baseUrl + "/v1/tracks", {
                    params: {
                        ids: ids.join(','),
                        market: market || ''
                    }
                }).pipe(operators.map(function (_a) {
                    var tracks = _a.tracks;
                    return tracks;
                }));
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        TrackService.prototype.getSeveralAudioFeatures = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                if (ids === undefined || ids === null || ids.length === 0) {
                    return rxjs.of([]);
                }
                else if (ids.length > 50) {
                    return rxjs.of(null);
                }
                return this.http.get(this.config.baseUrl + "/v1/audio-features", {
                    params: {
                        ids: ids.join(',')
                    }
                }).pipe(operators.map(function (_a) {
                    var audioFeatures = _a.audioFeatures;
                    return audioFeatures;
                }));
            };
        TrackService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TrackService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ TrackService.ngInjectableDef = i0.defineInjectable({ factory: function TrackService_Factory() { return new TrackService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: TrackService, providedIn: "root" });
        return TrackService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UserService = /** @class */ (function () {
        function UserService(config, http) {
            this.config = config;
            this.http = http;
        }
        /**
         * @param {?} id
         * @return {?}
         */
        UserService.prototype.getUser = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.http.get(this.config.baseUrl + ("/v1/users/" + id));
            };
        /**
         * @return {?}
         */
        UserService.prototype.getCurrentUser = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.config.baseUrl + "/v1/me");
            };
        UserService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        UserService.ctorParameters = function () {
            return [
                { type: ApiConfig, decorators: [{ type: i0.Optional }] },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ UserService.ngInjectableDef = i0.defineInjectable({ factory: function UserService_Factory() { return new UserService(i0.inject(ApiConfig, 8), i0.inject(i2.HttpClient)); }, token: UserService, providedIn: "root" });
        return UserService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSpotifyApiModule = /** @class */ (function () {
        function NgxSpotifyApiModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        NgxSpotifyApiModule.forRoot = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                config = {
                    api: __assign({}, new ApiConfig(), config.api),
                    authorization: __assign({}, new AuthorizationConfig(), config.authorization)
                };
                return {
                    ngModule: NgxSpotifyApiModule,
                    providers: [
                        { provide: AuthorizationConfig, useValue: config.authorization },
                        { provide: ApiConfig, useValue: config.api },
                    ]
                };
            };
        NgxSpotifyApiModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            i2.HttpClientModule,
                        ],
                        providers: [
                            ArtistService,
                            AlbumService,
                            BrowseService,
                            FollowService,
                            LibraryService,
                            PersonalizationService,
                            PlayerService,
                            PlaylistService,
                            SearchService,
                            TrackService,
                            UserService,
                            httpInterceptorProviders
                        ]
                    },] }
        ];
        return NgxSpotifyApiModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.httpInterceptorProviders = httpInterceptorProviders;
    exports.AuthInterceptor = AuthInterceptor;
    exports.CorsInterceptor = CorsInterceptor;
    exports.RemoveNullParamsInterceptor = RemoveNullParamsInterceptor;
    exports.UnderscoreToCamelcaseInterceptor = UnderscoreToCamelcaseInterceptor;
    exports.Album = Album;
    exports.AlbumSimplified = AlbumSimplified;
    exports.Artist = Artist;
    exports.ArtistSimplified = ArtistSimplified;
    exports.AudioAnalysis = AudioAnalysis;
    exports.AudioFeatures = AudioFeatures;
    exports.Category = Category;
    exports.Context = Context;
    exports.Copyright = Copyright;
    exports.Cursor = Cursor;
    exports.CursorPaging = CursorPaging;
    exports.Device = Device;
    exports.Error = Error;
    exports.ExternalId = ExternalId;
    exports.ExternalUrl = ExternalUrl;
    exports.FeaturedPlaylists = FeaturedPlaylists;
    exports.Followers = Followers;
    exports.Image = Image;
    exports.Paging = Paging;
    exports.PlayHistory = PlayHistory;
    exports.Playback = Playback;
    exports.PlayerError = PlayerError;
    exports.Playlist = Playlist;
    exports.PlaylistSimplified = PlaylistSimplified;
    exports.PlaylistTrack = PlaylistTrack;
    exports.Recommendations = Recommendations;
    exports.RecommendationsSeed = RecommendationsSeed;
    exports.Restriction = Restriction;
    exports.SavedAlbum = SavedAlbum;
    exports.SavedTrack = SavedTrack;
    exports.SearchResult = SearchResult;
    exports.Track = Track;
    exports.TrackCurrent = TrackCurrent;
    exports.TrackLink = TrackLink;
    exports.TrackSimplified = TrackSimplified;
    exports.UserPrivate = UserPrivate;
    exports.UserPublic = UserPublic;
    exports.ApiConfig = ApiConfig;
    exports.AuthorizationConfig = AuthorizationConfig;
    exports.SpotifyApiConfig = SpotifyApiConfig;
    exports.AlbumService = AlbumService;
    exports.ArtistService = ArtistService;
    exports.BrowseService = BrowseService;
    exports.FollowService = FollowService;
    exports.LibraryService = LibraryService;
    exports.PersonalizationService = PersonalizationService;
    exports.PlayerService = PlayerService;
    exports.PlaylistService = PlaylistService;
    exports.SearchService = SearchService;
    exports.TrackService = TrackService;
    exports.UserService = UserService;
    exports.NgxSpotifyApiModule = NgxSpotifyApiModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-spotify-api-core.umd.js.map